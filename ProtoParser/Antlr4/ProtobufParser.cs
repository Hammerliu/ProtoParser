//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ProtobufParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ProtobufParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, LINE_COMMENT=2, BLOCK_COMMENT=3, BYTE_ORDER_MARK=4, SYNTAX=5, IMPORT=6, 
		WEAK=7, PUBLIC=8, PACKAGE=9, OPTION=10, INF=11, NAN=12, REPEATED=13, OPTIONAL=14, 
		REQUIRED=15, BOOL=16, STRING=17, BYTES=18, FLOAT=19, DOUBLE=20, INT32=21, 
		INT64=22, UINT32=23, UINT64=24, SINT32=25, SINT64=26, FIXED32=27, FIXED64=28, 
		SFIXED32=29, SFIXED64=30, GROUP=31, ONEOF=32, MAP=33, EXTENSIONS=34, TO=35, 
		MAX=36, RESERVED=37, ENUM=38, MESSAGE=39, EXTEND=40, SERVICE=41, RPC=42, 
		STREAM=43, RETURNS=44, IDENTIFIER=45, INT_LITERAL=46, FLOAT_LITERAL=47, 
		INVALID_INT_LITERAL=48, INVALID_FLOAT_LITERAL=49, STRING_LITERAL=50, SEMICOLON=51, 
		COMMA=52, DOT=53, SLASH=54, COLON=55, EQUALS=56, MINUS=57, PLUS=58, L_PAREN=59, 
		R_PAREN=60, L_BRACE=61, R_BRACE=62, L_BRACKET=63, R_BRACKET=64, L_ANGLE=65, 
		R_ANGLE=66;
	public const int
		RULE_file = 0, RULE_fileElement = 1, RULE_commentDecl = 2, RULE_syntaxDecl = 3, 
		RULE_syntaxLevel = 4, RULE_stringLiteral = 5, RULE_emptyDecl = 6, RULE_packageDecl = 7, 
		RULE_packageName = 8, RULE_importDecl = 9, RULE_importedFileName = 10, 
		RULE_typeName = 11, RULE_qualifiedIdentifier = 12, RULE_fieldDeclTypeName = 13, 
		RULE_messageFieldDeclTypeName = 14, RULE_extensionFieldDeclTypeName = 15, 
		RULE_oneofFieldDeclTypeName = 16, RULE_methodDeclTypeName = 17, RULE_fieldDeclIdentifier = 18, 
		RULE_messageFieldDeclIdentifier = 19, RULE_extensionFieldDeclIdentifier = 20, 
		RULE_oneofFieldDeclIdentifier = 21, RULE_methodDeclIdentifier = 22, RULE_fullyQualifiedIdentifier = 23, 
		RULE_optionDecl = 24, RULE_compactOptions = 25, RULE_compactOption = 26, 
		RULE_optionName = 27, RULE_optionValue = 28, RULE_scalarValue = 29, RULE_intLiteral = 30, 
		RULE_floatLiteral = 31, RULE_specialFloatLiteral = 32, RULE_messageLiteralWithBraces = 33, 
		RULE_messageTextFormat = 34, RULE_messageLiteralField = 35, RULE_messageLiteralFieldName = 36, 
		RULE_specialFieldName = 37, RULE_extensionFieldName = 38, RULE_typeURL = 39, 
		RULE_value = 40, RULE_messageValue = 41, RULE_messageLiteral = 42, RULE_listLiteral = 43, 
		RULE_listElement = 44, RULE_listOfMessagesLiteral = 45, RULE_messageDecl = 46, 
		RULE_messageName = 47, RULE_messageElement = 48, RULE_messageFieldDecl = 49, 
		RULE_fieldDeclWithCardinality = 50, RULE_fieldCardinality = 51, RULE_fieldName = 52, 
		RULE_fieldNumber = 53, RULE_mapFieldDecl = 54, RULE_mapType = 55, RULE_mapKeyType = 56, 
		RULE_groupDecl = 57, RULE_oneofDecl = 58, RULE_oneofName = 59, RULE_oneofElement = 60, 
		RULE_oneofFieldDecl = 61, RULE_oneofGroupDecl = 62, RULE_extensionRangeDecl = 63, 
		RULE_tagRanges = 64, RULE_tagRange = 65, RULE_tagRangeStart = 66, RULE_tagRangeEnd = 67, 
		RULE_messageReservedDecl = 68, RULE_names = 69, RULE_enumDecl = 70, RULE_enumName = 71, 
		RULE_enumElement = 72, RULE_enumValueDecl = 73, RULE_enumValueName = 74, 
		RULE_enumValueNumber = 75, RULE_enumReservedDecl = 76, RULE_enumValueRanges = 77, 
		RULE_enumValueRange = 78, RULE_enumValueRangeStart = 79, RULE_enumValueRangeEnd = 80, 
		RULE_extensionDecl = 81, RULE_extendedMessage = 82, RULE_extensionElement = 83, 
		RULE_extensionFieldDecl = 84, RULE_serviceDecl = 85, RULE_serviceName = 86, 
		RULE_serviceElement = 87, RULE_methodDecl = 88, RULE_methodName = 89, 
		RULE_inputType = 90, RULE_outputType = 91, RULE_methodElement = 92, RULE_messageType = 93, 
		RULE_identifier = 94, RULE_alwaysIdent = 95, RULE_sometimesIdent = 96;
	public static readonly string[] ruleNames = {
		"file", "fileElement", "commentDecl", "syntaxDecl", "syntaxLevel", "stringLiteral", 
		"emptyDecl", "packageDecl", "packageName", "importDecl", "importedFileName", 
		"typeName", "qualifiedIdentifier", "fieldDeclTypeName", "messageFieldDeclTypeName", 
		"extensionFieldDeclTypeName", "oneofFieldDeclTypeName", "methodDeclTypeName", 
		"fieldDeclIdentifier", "messageFieldDeclIdentifier", "extensionFieldDeclIdentifier", 
		"oneofFieldDeclIdentifier", "methodDeclIdentifier", "fullyQualifiedIdentifier", 
		"optionDecl", "compactOptions", "compactOption", "optionName", "optionValue", 
		"scalarValue", "intLiteral", "floatLiteral", "specialFloatLiteral", "messageLiteralWithBraces", 
		"messageTextFormat", "messageLiteralField", "messageLiteralFieldName", 
		"specialFieldName", "extensionFieldName", "typeURL", "value", "messageValue", 
		"messageLiteral", "listLiteral", "listElement", "listOfMessagesLiteral", 
		"messageDecl", "messageName", "messageElement", "messageFieldDecl", "fieldDeclWithCardinality", 
		"fieldCardinality", "fieldName", "fieldNumber", "mapFieldDecl", "mapType", 
		"mapKeyType", "groupDecl", "oneofDecl", "oneofName", "oneofElement", "oneofFieldDecl", 
		"oneofGroupDecl", "extensionRangeDecl", "tagRanges", "tagRange", "tagRangeStart", 
		"tagRangeEnd", "messageReservedDecl", "names", "enumDecl", "enumName", 
		"enumElement", "enumValueDecl", "enumValueName", "enumValueNumber", "enumReservedDecl", 
		"enumValueRanges", "enumValueRange", "enumValueRangeStart", "enumValueRangeEnd", 
		"extensionDecl", "extendedMessage", "extensionElement", "extensionFieldDecl", 
		"serviceDecl", "serviceName", "serviceElement", "methodDecl", "methodName", 
		"inputType", "outputType", "methodElement", "messageType", "identifier", 
		"alwaysIdent", "sometimesIdent"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'\\uFEFF'", "'syntax'", "'import'", "'weak'", 
		"'public'", "'package'", "'option'", "'inf'", "'nan'", "'repeated'", "'optional'", 
		"'required'", "'bool'", "'string'", "'bytes'", "'float'", "'double'", 
		"'int32'", "'int64'", "'uint32'", "'uint64'", "'sint32'", "'sint64'", 
		"'fixed32'", "'fixed64'", "'sfixed32'", "'sfixed64'", "'group'", "'oneof'", 
		"'map'", "'extensions'", "'to'", "'max'", "'reserved'", "'enum'", "'message'", 
		"'extend'", "'service'", "'rpc'", "'stream'", "'returns'", null, null, 
		null, null, null, null, "';'", "','", "'.'", "'/'", "':'", "'='", "'-'", 
		"'+'", "'('", "')'", "'{'", "'}'", "'['", "']'", "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "LINE_COMMENT", "BLOCK_COMMENT", "BYTE_ORDER_MARK", "SYNTAX", 
		"IMPORT", "WEAK", "PUBLIC", "PACKAGE", "OPTION", "INF", "NAN", "REPEATED", 
		"OPTIONAL", "REQUIRED", "BOOL", "STRING", "BYTES", "FLOAT", "DOUBLE", 
		"INT32", "INT64", "UINT32", "UINT64", "SINT32", "SINT64", "FIXED32", "FIXED64", 
		"SFIXED32", "SFIXED64", "GROUP", "ONEOF", "MAP", "EXTENSIONS", "TO", "MAX", 
		"RESERVED", "ENUM", "MESSAGE", "EXTEND", "SERVICE", "RPC", "STREAM", "RETURNS", 
		"IDENTIFIER", "INT_LITERAL", "FLOAT_LITERAL", "INVALID_INT_LITERAL", "INVALID_FLOAT_LITERAL", 
		"STRING_LITERAL", "SEMICOLON", "COMMA", "DOT", "SLASH", "COLON", "EQUALS", 
		"MINUS", "PLUS", "L_PAREN", "R_PAREN", "L_BRACE", "R_BRACE", "L_BRACKET", 
		"R_BRACKET", "L_ANGLE", "R_ANGLE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ProtobufParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ProtobufParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ProtobufParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ProtobufParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ProtobufParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_ORDER_MARK() { return GetToken(ProtobufParser.BYTE_ORDER_MARK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommentDeclContext[] commentDecl() {
			return GetRuleContexts<CommentDeclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDeclContext commentDecl(int i) {
			return GetRuleContext<CommentDeclContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxDeclContext syntaxDecl() {
			return GetRuleContext<SyntaxDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileElementContext[] fileElement() {
			return GetRuleContexts<FileElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FileElementContext fileElement(int i) {
			return GetRuleContext<FileElementContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 194;
				Match(BYTE_ORDER_MARK);
				}
			}

			State = 200;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 197;
					commentDecl();
					}
					} 
				}
				State = 202;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SYNTAX) {
				{
				State = 203;
				syntaxDecl();
				}
			}

			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2255922982291020L) != 0)) {
				{
				{
				State = 206;
				fileElement();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 212;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportDeclContext importDecl() {
			return GetRuleContext<ImportDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageDeclContext packageDecl() {
			return GetRuleContext<PackageDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionDeclContext optionDecl() {
			return GetRuleContext<OptionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageDeclContext messageDecl() {
			return GetRuleContext<MessageDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclContext enumDecl() {
			return GetRuleContext<EnumDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionDeclContext extensionDecl() {
			return GetRuleContext<ExtensionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServiceDeclContext serviceDecl() {
			return GetRuleContext<ServiceDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyDeclContext emptyDecl() {
			return GetRuleContext<EmptyDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDeclContext commentDecl() {
			return GetRuleContext<CommentDeclContext>(0);
		}
		public FileElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileElementContext fileElement() {
		FileElementContext _localctx = new FileElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_fileElement);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IMPORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				importDecl();
				}
				break;
			case PACKAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				packageDecl();
				}
				break;
			case OPTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 216;
				optionDecl();
				}
				break;
			case MESSAGE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 217;
				messageDecl();
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 5);
				{
				State = 218;
				enumDecl();
				}
				break;
			case EXTEND:
				EnterOuterAlt(_localctx, 6);
				{
				State = 219;
				extensionDecl();
				}
				break;
			case SERVICE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 220;
				serviceDecl();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 8);
				{
				State = 221;
				emptyDecl();
				}
				break;
			case LINE_COMMENT:
			case BLOCK_COMMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 222;
				commentDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINE_COMMENT() { return GetToken(ProtobufParser.LINE_COMMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_COMMENT() { return GetToken(ProtobufParser.BLOCK_COMMENT, 0); }
		public CommentDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentDeclContext commentDecl() {
		CommentDeclContext _localctx = new CommentDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_commentDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			_la = TokenStream.LA(1);
			if ( !(_la==LINE_COMMENT || _la==BLOCK_COMMENT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNTAX() { return GetToken(ProtobufParser.SYNTAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ProtobufParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SyntaxLevelContext syntaxLevel() {
			return GetRuleContext<SyntaxLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		public SyntaxDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntaxDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyntaxDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxDeclContext syntaxDecl() {
		SyntaxDeclContext _localctx = new SyntaxDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_syntaxDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(SYNTAX);
			State = 228;
			Match(EQUALS);
			State = 229;
			syntaxLevel();
			State = 230;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SyntaxLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public SyntaxLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_syntaxLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSyntaxLevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SyntaxLevelContext syntaxLevel() {
		SyntaxLevelContext _localctx = new SyntaxLevelContext(Context, State);
		EnterRule(_localctx, 8, RULE_syntaxLevel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING_LITERAL() { return GetTokens(ProtobufParser.STRING_LITERAL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_LITERAL(int i) {
			return GetToken(ProtobufParser.STRING_LITERAL, i);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext stringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 10, RULE_stringLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 234;
				Match(STRING_LITERAL);
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING_LITERAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		public EmptyDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EmptyDeclContext emptyDecl() {
		EmptyDeclContext _localctx = new EmptyDeclContext(Context, State);
		EnterRule(_localctx, 12, RULE_emptyDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(ProtobufParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PackageNameContext packageName() {
			return GetRuleContext<PackageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		public PackageDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclContext packageDecl() {
		PackageDeclContext _localctx = new PackageDeclContext(Context, State);
		EnterRule(_localctx, 14, RULE_packageDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241;
			Match(PACKAGE);
			State = 242;
			packageName();
			State = 243;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public PackageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageNameContext packageName() {
		PackageNameContext _localctx = new PackageNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_packageName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(ProtobufParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportedFileNameContext importedFileName() {
			return GetRuleContext<ImportedFileNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEAK() { return GetToken(ProtobufParser.WEAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(ProtobufParser.PUBLIC, 0); }
		public ImportDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclContext importDecl() {
		ImportDeclContext _localctx = new ImportDeclContext(Context, State);
		EnterRule(_localctx, 18, RULE_importDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			Match(IMPORT);
			State = 249;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WEAK || _la==PUBLIC) {
				{
				State = 248;
				_la = TokenStream.LA(1);
				if ( !(_la==WEAK || _la==PUBLIC) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 251;
			importedFileName();
			State = 252;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportedFileNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ImportedFileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importedFileName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportedFileName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportedFileNameContext importedFileName() {
		ImportedFileNameContext _localctx = new ImportedFileNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_importedFileName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			stringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ProtobufParser.DOT, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 256;
				Match(DOT);
				}
			}

			State = 259;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ProtobufParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ProtobufParser.DOT, i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_qualifiedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261;
			identifier();
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 262;
				Match(DOT);
				State = 263;
				identifier();
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclIdentifierContext fieldDeclIdentifier() {
			return GetRuleContext<FieldDeclIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ProtobufParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullyQualifiedIdentifierContext fullyQualifiedIdentifier() {
			return GetRuleContext<FullyQualifiedIdentifierContext>(0);
		}
		public FieldDeclTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclTypeNameContext fieldDeclTypeName() {
		FieldDeclTypeNameContext _localctx = new FieldDeclTypeNameContext(Context, State);
		EnterRule(_localctx, 26, RULE_fieldDeclTypeName);
		int _la;
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case INF:
			case NAN:
			case REPEATED:
			case OPTIONAL:
			case REQUIRED:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case ONEOF:
			case MAP:
			case EXTENSIONS:
			case TO:
			case MAX:
			case RESERVED:
			case ENUM:
			case MESSAGE:
			case EXTEND:
			case SERVICE:
			case RPC:
			case STREAM:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 269;
				fieldDeclIdentifier();
				State = 272;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 270;
					Match(DOT);
					State = 271;
					qualifiedIdentifier();
					}
				}

				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274;
				fullyQualifiedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageFieldDeclTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageFieldDeclIdentifierContext messageFieldDeclIdentifier() {
			return GetRuleContext<MessageFieldDeclIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ProtobufParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullyQualifiedIdentifierContext fullyQualifiedIdentifier() {
			return GetRuleContext<FullyQualifiedIdentifierContext>(0);
		}
		public MessageFieldDeclTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageFieldDeclTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageFieldDeclTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageFieldDeclTypeNameContext messageFieldDeclTypeName() {
		MessageFieldDeclTypeNameContext _localctx = new MessageFieldDeclTypeNameContext(Context, State);
		EnterRule(_localctx, 28, RULE_messageFieldDeclTypeName);
		int _la;
		try {
			State = 283;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case INF:
			case NAN:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case MAP:
			case TO:
			case MAX:
			case SERVICE:
			case RPC:
			case STREAM:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 277;
				messageFieldDeclIdentifier();
				State = 280;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 278;
					Match(DOT);
					State = 279;
					qualifiedIdentifier();
					}
				}

				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 282;
				fullyQualifiedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionFieldDeclTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionFieldDeclIdentifierContext extensionFieldDeclIdentifier() {
			return GetRuleContext<ExtensionFieldDeclIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ProtobufParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullyQualifiedIdentifierContext fullyQualifiedIdentifier() {
			return GetRuleContext<FullyQualifiedIdentifierContext>(0);
		}
		public ExtensionFieldDeclTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionFieldDeclTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionFieldDeclTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionFieldDeclTypeNameContext extensionFieldDeclTypeName() {
		ExtensionFieldDeclTypeNameContext _localctx = new ExtensionFieldDeclTypeNameContext(Context, State);
		EnterRule(_localctx, 30, RULE_extensionFieldDeclTypeName);
		int _la;
		try {
			State = 291;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case INF:
			case NAN:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case ONEOF:
			case MAP:
			case EXTENSIONS:
			case TO:
			case MAX:
			case RESERVED:
			case ENUM:
			case MESSAGE:
			case EXTEND:
			case SERVICE:
			case RPC:
			case STREAM:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 285;
				extensionFieldDeclIdentifier();
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 286;
					Match(DOT);
					State = 287;
					qualifiedIdentifier();
					}
				}

				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				fullyQualifiedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofFieldDeclTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OneofFieldDeclIdentifierContext oneofFieldDeclIdentifier() {
			return GetRuleContext<OneofFieldDeclIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ProtobufParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullyQualifiedIdentifierContext fullyQualifiedIdentifier() {
			return GetRuleContext<FullyQualifiedIdentifierContext>(0);
		}
		public OneofFieldDeclTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofFieldDeclTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneofFieldDeclTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofFieldDeclTypeNameContext oneofFieldDeclTypeName() {
		OneofFieldDeclTypeNameContext _localctx = new OneofFieldDeclTypeNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_oneofFieldDeclTypeName);
		int _la;
		try {
			State = 299;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case INF:
			case NAN:
			case REPEATED:
			case OPTIONAL:
			case REQUIRED:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case GROUP:
			case ONEOF:
			case MAP:
			case EXTENSIONS:
			case TO:
			case MAX:
			case RESERVED:
			case ENUM:
			case MESSAGE:
			case EXTEND:
			case SERVICE:
			case RPC:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 293;
				oneofFieldDeclIdentifier();
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 294;
					Match(DOT);
					State = 295;
					qualifiedIdentifier();
					}
				}

				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 298;
				fullyQualifiedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclTypeNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclIdentifierContext methodDeclIdentifier() {
			return GetRuleContext<MethodDeclIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ProtobufParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FullyQualifiedIdentifierContext fullyQualifiedIdentifier() {
			return GetRuleContext<FullyQualifiedIdentifierContext>(0);
		}
		public MethodDeclTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclTypeName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclTypeNameContext methodDeclTypeName() {
		MethodDeclTypeNameContext _localctx = new MethodDeclTypeNameContext(Context, State);
		EnterRule(_localctx, 34, RULE_methodDeclTypeName);
		int _la;
		try {
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case INF:
			case NAN:
			case REPEATED:
			case OPTIONAL:
			case REQUIRED:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case GROUP:
			case ONEOF:
			case MAP:
			case EXTENSIONS:
			case TO:
			case MAX:
			case RESERVED:
			case ENUM:
			case MESSAGE:
			case EXTEND:
			case SERVICE:
			case RPC:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301;
				methodDeclIdentifier();
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT) {
					{
					State = 302;
					Match(DOT);
					State = 303;
					qualifiedIdentifier();
					}
				}

				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306;
				fullyQualifiedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlwaysIdentContext alwaysIdent() {
			return GetRuleContext<AlwaysIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(ProtobufParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(ProtobufParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEOF() { return GetToken(ProtobufParser.ONEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVED() { return GetToken(ProtobufParser.RESERVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSIONS() { return GetToken(ProtobufParser.EXTENSIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(ProtobufParser.EXTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(ProtobufParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(ProtobufParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRED() { return GetToken(ProtobufParser.REQUIRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATED() { return GetToken(ProtobufParser.REPEATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(ProtobufParser.STREAM, 0); }
		public FieldDeclIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclIdentifierContext fieldDeclIdentifier() {
		FieldDeclIdentifierContext _localctx = new FieldDeclIdentifierContext(Context, State);
		EnterRule(_localctx, 36, RULE_fieldDeclIdentifier);
		try {
			State = 321;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case INF:
			case NAN:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case MAP:
			case TO:
			case MAX:
			case SERVICE:
			case RPC:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 309;
				alwaysIdent();
				}
				break;
			case MESSAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 310;
				Match(MESSAGE);
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 311;
				Match(ENUM);
				}
				break;
			case ONEOF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 312;
				Match(ONEOF);
				}
				break;
			case RESERVED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 313;
				Match(RESERVED);
				}
				break;
			case EXTENSIONS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 314;
				Match(EXTENSIONS);
				}
				break;
			case EXTEND:
				EnterOuterAlt(_localctx, 7);
				{
				State = 315;
				Match(EXTEND);
				}
				break;
			case OPTION:
				EnterOuterAlt(_localctx, 8);
				{
				State = 316;
				Match(OPTION);
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 317;
				Match(OPTIONAL);
				}
				break;
			case REQUIRED:
				EnterOuterAlt(_localctx, 10);
				{
				State = 318;
				Match(REQUIRED);
				}
				break;
			case REPEATED:
				EnterOuterAlt(_localctx, 11);
				{
				State = 319;
				Match(REPEATED);
				}
				break;
			case STREAM:
				EnterOuterAlt(_localctx, 12);
				{
				State = 320;
				Match(STREAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageFieldDeclIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlwaysIdentContext alwaysIdent() {
			return GetRuleContext<AlwaysIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(ProtobufParser.STREAM, 0); }
		public MessageFieldDeclIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageFieldDeclIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageFieldDeclIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageFieldDeclIdentifierContext messageFieldDeclIdentifier() {
		MessageFieldDeclIdentifierContext _localctx = new MessageFieldDeclIdentifierContext(Context, State);
		EnterRule(_localctx, 38, RULE_messageFieldDeclIdentifier);
		try {
			State = 325;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case INF:
			case NAN:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case MAP:
			case TO:
			case MAX:
			case SERVICE:
			case RPC:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323;
				alwaysIdent();
				}
				break;
			case STREAM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 324;
				Match(STREAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionFieldDeclIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlwaysIdentContext alwaysIdent() {
			return GetRuleContext<AlwaysIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(ProtobufParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(ProtobufParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEOF() { return GetToken(ProtobufParser.ONEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVED() { return GetToken(ProtobufParser.RESERVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSIONS() { return GetToken(ProtobufParser.EXTENSIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(ProtobufParser.EXTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(ProtobufParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(ProtobufParser.STREAM, 0); }
		public ExtensionFieldDeclIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionFieldDeclIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionFieldDeclIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionFieldDeclIdentifierContext extensionFieldDeclIdentifier() {
		ExtensionFieldDeclIdentifierContext _localctx = new ExtensionFieldDeclIdentifierContext(Context, State);
		EnterRule(_localctx, 40, RULE_extensionFieldDeclIdentifier);
		try {
			State = 336;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case INF:
			case NAN:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case MAP:
			case TO:
			case MAX:
			case SERVICE:
			case RPC:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327;
				alwaysIdent();
				}
				break;
			case MESSAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328;
				Match(MESSAGE);
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 329;
				Match(ENUM);
				}
				break;
			case ONEOF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 330;
				Match(ONEOF);
				}
				break;
			case RESERVED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 331;
				Match(RESERVED);
				}
				break;
			case EXTENSIONS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 332;
				Match(EXTENSIONS);
				}
				break;
			case EXTEND:
				EnterOuterAlt(_localctx, 7);
				{
				State = 333;
				Match(EXTEND);
				}
				break;
			case OPTION:
				EnterOuterAlt(_localctx, 8);
				{
				State = 334;
				Match(OPTION);
				}
				break;
			case STREAM:
				EnterOuterAlt(_localctx, 9);
				{
				State = 335;
				Match(STREAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofFieldDeclIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlwaysIdentContext alwaysIdent() {
			return GetRuleContext<AlwaysIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(ProtobufParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(ProtobufParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEOF() { return GetToken(ProtobufParser.ONEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVED() { return GetToken(ProtobufParser.RESERVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSIONS() { return GetToken(ProtobufParser.EXTENSIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(ProtobufParser.EXTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(ProtobufParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(ProtobufParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRED() { return GetToken(ProtobufParser.REQUIRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATED() { return GetToken(ProtobufParser.REPEATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(ProtobufParser.GROUP, 0); }
		public OneofFieldDeclIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofFieldDeclIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneofFieldDeclIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofFieldDeclIdentifierContext oneofFieldDeclIdentifier() {
		OneofFieldDeclIdentifierContext _localctx = new OneofFieldDeclIdentifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_oneofFieldDeclIdentifier);
		try {
			State = 350;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case INF:
			case NAN:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case MAP:
			case TO:
			case MAX:
			case SERVICE:
			case RPC:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 338;
				alwaysIdent();
				}
				break;
			case MESSAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339;
				Match(MESSAGE);
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 340;
				Match(ENUM);
				}
				break;
			case ONEOF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 341;
				Match(ONEOF);
				}
				break;
			case RESERVED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 342;
				Match(RESERVED);
				}
				break;
			case EXTENSIONS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 343;
				Match(EXTENSIONS);
				}
				break;
			case EXTEND:
				EnterOuterAlt(_localctx, 7);
				{
				State = 344;
				Match(EXTEND);
				}
				break;
			case OPTION:
				EnterOuterAlt(_localctx, 8);
				{
				State = 345;
				Match(OPTION);
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 346;
				Match(OPTIONAL);
				}
				break;
			case REQUIRED:
				EnterOuterAlt(_localctx, 10);
				{
				State = 347;
				Match(REQUIRED);
				}
				break;
			case REPEATED:
				EnterOuterAlt(_localctx, 11);
				{
				State = 348;
				Match(REPEATED);
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 12);
				{
				State = 349;
				Match(GROUP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlwaysIdentContext alwaysIdent() {
			return GetRuleContext<AlwaysIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(ProtobufParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(ProtobufParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEOF() { return GetToken(ProtobufParser.ONEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVED() { return GetToken(ProtobufParser.RESERVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSIONS() { return GetToken(ProtobufParser.EXTENSIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(ProtobufParser.EXTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(ProtobufParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(ProtobufParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRED() { return GetToken(ProtobufParser.REQUIRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATED() { return GetToken(ProtobufParser.REPEATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(ProtobufParser.GROUP, 0); }
		public MethodDeclIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclIdentifierContext methodDeclIdentifier() {
		MethodDeclIdentifierContext _localctx = new MethodDeclIdentifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_methodDeclIdentifier);
		try {
			State = 364;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case INF:
			case NAN:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case MAP:
			case TO:
			case MAX:
			case SERVICE:
			case RPC:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 352;
				alwaysIdent();
				}
				break;
			case MESSAGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 353;
				Match(MESSAGE);
				}
				break;
			case ENUM:
				EnterOuterAlt(_localctx, 3);
				{
				State = 354;
				Match(ENUM);
				}
				break;
			case ONEOF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 355;
				Match(ONEOF);
				}
				break;
			case RESERVED:
				EnterOuterAlt(_localctx, 5);
				{
				State = 356;
				Match(RESERVED);
				}
				break;
			case EXTENSIONS:
				EnterOuterAlt(_localctx, 6);
				{
				State = 357;
				Match(EXTENSIONS);
				}
				break;
			case EXTEND:
				EnterOuterAlt(_localctx, 7);
				{
				State = 358;
				Match(EXTEND);
				}
				break;
			case OPTION:
				EnterOuterAlt(_localctx, 8);
				{
				State = 359;
				Match(OPTION);
				}
				break;
			case OPTIONAL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 360;
				Match(OPTIONAL);
				}
				break;
			case REQUIRED:
				EnterOuterAlt(_localctx, 10);
				{
				State = 361;
				Match(REQUIRED);
				}
				break;
			case REPEATED:
				EnterOuterAlt(_localctx, 11);
				{
				State = 362;
				Match(REPEATED);
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 12);
				{
				State = 363;
				Match(GROUP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FullyQualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(ProtobufParser.DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FullyQualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullyQualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullyQualifiedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullyQualifiedIdentifierContext fullyQualifiedIdentifier() {
		FullyQualifiedIdentifierContext _localctx = new FullyQualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 46, RULE_fullyQualifiedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			Match(DOT);
			State = 367;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(ProtobufParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ProtobufParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		public OptionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionDeclContext optionDecl() {
		OptionDeclContext _localctx = new OptionDeclContext(Context, State);
		EnterRule(_localctx, 48, RULE_optionDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369;
			Match(OPTION);
			State = 370;
			optionName();
			State = 371;
			Match(EQUALS);
			State = 372;
			optionValue();
			State = 373;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompactOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(ProtobufParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompactOptionContext[] compactOption() {
			return GetRuleContexts<CompactOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompactOptionContext compactOption(int i) {
			return GetRuleContext<CompactOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(ProtobufParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ProtobufParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ProtobufParser.COMMA, i);
		}
		public CompactOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compactOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompactOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompactOptionsContext compactOptions() {
		CompactOptionsContext _localctx = new CompactOptionsContext(Context, State);
		EnterRule(_localctx, 50, RULE_compactOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			Match(L_BRACKET);
			State = 376;
			compactOption();
			State = 381;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 377;
				Match(COMMA);
				State = 378;
				compactOption();
				}
				}
				State = 383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 384;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompactOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionNameContext optionName() {
			return GetRuleContext<OptionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ProtobufParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue() {
			return GetRuleContext<OptionValueContext>(0);
		}
		public CompactOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compactOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompactOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompactOptionContext compactOption() {
		CompactOptionContext _localctx = new CompactOptionContext(Context, State);
		EnterRule(_localctx, 52, RULE_compactOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			optionName();
			State = 387;
			Match(EQUALS);
			State = 388;
			optionValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(ProtobufParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(ProtobufParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(ProtobufParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(ProtobufParser.DOT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionNameContext[] optionName() {
			return GetRuleContexts<OptionNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionNameContext optionName(int i) {
			return GetRuleContext<OptionNameContext>(i);
		}
		public OptionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionNameContext optionName() {
		OptionNameContext _localctx = new OptionNameContext(Context, State);
		EnterRule(_localctx, 54, RULE_optionName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case INF:
			case NAN:
			case REPEATED:
			case OPTIONAL:
			case REQUIRED:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case GROUP:
			case ONEOF:
			case MAP:
			case EXTENSIONS:
			case TO:
			case MAX:
			case RESERVED:
			case ENUM:
			case MESSAGE:
			case EXTEND:
			case SERVICE:
			case RPC:
			case STREAM:
			case RETURNS:
			case IDENTIFIER:
				{
				State = 390;
				identifier();
				}
				break;
			case L_PAREN:
				{
				State = 391;
				Match(L_PAREN);
				State = 392;
				typeName();
				State = 393;
				Match(R_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 401;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 397;
					Match(DOT);
					State = 398;
					optionName();
					}
					} 
				}
				State = 403;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageLiteralWithBracesContext messageLiteralWithBraces() {
			return GetRuleContext<MessageLiteralWithBracesContext>(0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 56, RULE_optionValue);
		try {
			State = 406;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case INF:
			case NAN:
			case REPEATED:
			case OPTIONAL:
			case REQUIRED:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case GROUP:
			case ONEOF:
			case MAP:
			case EXTENSIONS:
			case TO:
			case MAX:
			case RESERVED:
			case ENUM:
			case MESSAGE:
			case EXTEND:
			case SERVICE:
			case RPC:
			case STREAM:
			case RETURNS:
			case IDENTIFIER:
			case INT_LITERAL:
			case FLOAT_LITERAL:
			case STRING_LITERAL:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 404;
				scalarValue();
				}
				break;
			case L_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 405;
				messageLiteralWithBraces();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntLiteralContext intLiteral() {
			return GetRuleContext<IntLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FloatLiteralContext floatLiteral() {
			return GetRuleContext<FloatLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpecialFloatLiteralContext specialFloatLiteral() {
			return GetRuleContext<SpecialFloatLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ScalarValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarValueContext scalarValue() {
		ScalarValueContext _localctx = new ScalarValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_scalarValue);
		try {
			State = 413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408;
				stringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409;
				intLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 410;
				floatLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 411;
				specialFloatLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 412;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LITERAL() { return GetToken(ProtobufParser.INT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ProtobufParser.MINUS, 0); }
		public IntLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntLiteralContext intLiteral() {
		IntLiteralContext _localctx = new IntLiteralContext(Context, State);
		EnterRule(_localctx, 60, RULE_intLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 415;
				Match(MINUS);
				}
			}

			State = 418;
			Match(INT_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_LITERAL() { return GetToken(ProtobufParser.FLOAT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ProtobufParser.MINUS, 0); }
		public FloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatLiteralContext floatLiteral() {
		FloatLiteralContext _localctx = new FloatLiteralContext(Context, State);
		EnterRule(_localctx, 62, RULE_floatLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 420;
				Match(MINUS);
				}
			}

			State = 423;
			Match(FLOAT_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialFloatLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ProtobufParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INF() { return GetToken(ProtobufParser.INF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAN() { return GetToken(ProtobufParser.NAN, 0); }
		public SpecialFloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialFloatLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialFloatLiteralContext specialFloatLiteral() {
		SpecialFloatLiteralContext _localctx = new SpecialFloatLiteralContext(Context, State);
		EnterRule(_localctx, 64, RULE_specialFloatLiteral);
		try {
			State = 429;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 425;
				Match(MINUS);
				State = 426;
				Match(INF);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427;
				Match(MINUS);
				State = 428;
				Match(NAN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageLiteralWithBracesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(ProtobufParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTextFormatContext messageTextFormat() {
			return GetRuleContext<MessageTextFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(ProtobufParser.R_BRACE, 0); }
		public MessageLiteralWithBracesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageLiteralWithBraces; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageLiteralWithBraces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageLiteralWithBracesContext messageLiteralWithBraces() {
		MessageLiteralWithBracesContext _localctx = new MessageLiteralWithBracesContext(Context, State);
		EnterRule(_localctx, 66, RULE_messageLiteralWithBraces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			Match(L_BRACE);
			State = 432;
			messageTextFormat();
			State = 433;
			Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTextFormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageLiteralFieldContext[] messageLiteralField() {
			return GetRuleContexts<MessageLiteralFieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageLiteralFieldContext messageLiteralField(int i) {
			return GetRuleContext<MessageLiteralFieldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ProtobufParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ProtobufParser.COMMA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON() { return GetTokens(ProtobufParser.SEMICOLON); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON(int i) {
			return GetToken(ProtobufParser.SEMICOLON, i);
		}
		public MessageTextFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageTextFormat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageTextFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageTextFormatContext messageTextFormat() {
		MessageTextFormatContext _localctx = new MessageTextFormatContext(Context, State);
		EnterRule(_localctx, 68, RULE_messageTextFormat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -9223301668110598176L) != 0)) {
				{
				{
				State = 435;
				messageLiteralField();
				State = 437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON || _la==COMMA) {
					{
					State = 436;
					_la = TokenStream.LA(1);
					if ( !(_la==SEMICOLON || _la==COMMA) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				}
				State = 443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageLiteralFieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageLiteralFieldNameContext messageLiteralFieldName() {
			return GetRuleContext<MessageLiteralFieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(ProtobufParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageValueContext messageValue() {
			return GetRuleContext<MessageValueContext>(0);
		}
		public MessageLiteralFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageLiteralField; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageLiteralField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageLiteralFieldContext messageLiteralField() {
		MessageLiteralFieldContext _localctx = new MessageLiteralFieldContext(Context, State);
		EnterRule(_localctx, 70, RULE_messageLiteralField);
		try {
			State = 451;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 444;
				messageLiteralFieldName();
				State = 445;
				Match(COLON);
				State = 446;
				value();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448;
				messageLiteralFieldName();
				State = 449;
				messageValue();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageLiteralFieldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(ProtobufParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpecialFieldNameContext specialFieldName() {
			return GetRuleContext<SpecialFieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(ProtobufParser.R_BRACKET, 0); }
		public MessageLiteralFieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageLiteralFieldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageLiteralFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageLiteralFieldNameContext messageLiteralFieldName() {
		MessageLiteralFieldNameContext _localctx = new MessageLiteralFieldNameContext(Context, State);
		EnterRule(_localctx, 72, RULE_messageLiteralFieldName);
		try {
			State = 458;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case INF:
			case NAN:
			case REPEATED:
			case OPTIONAL:
			case REQUIRED:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case GROUP:
			case ONEOF:
			case MAP:
			case EXTENSIONS:
			case TO:
			case MAX:
			case RESERVED:
			case ENUM:
			case MESSAGE:
			case EXTEND:
			case SERVICE:
			case RPC:
			case STREAM:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 453;
				fieldName();
				}
				break;
			case L_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 454;
				Match(L_BRACKET);
				State = 455;
				specialFieldName();
				State = 456;
				Match(R_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecialFieldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionFieldNameContext extensionFieldName() {
			return GetRuleContext<ExtensionFieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeURLContext typeURL() {
			return GetRuleContext<TypeURLContext>(0);
		}
		public SpecialFieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specialFieldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecialFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecialFieldNameContext specialFieldName() {
		SpecialFieldNameContext _localctx = new SpecialFieldNameContext(Context, State);
		EnterRule(_localctx, 74, RULE_specialFieldName);
		try {
			State = 462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 460;
				extensionFieldName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 461;
				typeURL();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionFieldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ExtensionFieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionFieldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionFieldNameContext extensionFieldName() {
		ExtensionFieldNameContext _localctx = new ExtensionFieldNameContext(Context, State);
		EnterRule(_localctx, 76, RULE_extensionFieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeURLContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext[] qualifiedIdentifier() {
			return GetRuleContexts<QualifiedIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier(int i) {
			return GetRuleContext<QualifiedIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(ProtobufParser.SLASH, 0); }
		public TypeURLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeURL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeURL(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeURLContext typeURL() {
		TypeURLContext _localctx = new TypeURLContext(Context, State);
		EnterRule(_localctx, 78, RULE_typeURL);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 466;
			qualifiedIdentifier();
			State = 467;
			Match(SLASH);
			State = 468;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageLiteralContext messageLiteral() {
			return GetRuleContext<MessageLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListLiteralContext listLiteral() {
			return GetRuleContext<ListLiteralContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 80, RULE_value);
		try {
			State = 473;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case INF:
			case NAN:
			case REPEATED:
			case OPTIONAL:
			case REQUIRED:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case GROUP:
			case ONEOF:
			case MAP:
			case EXTENSIONS:
			case TO:
			case MAX:
			case RESERVED:
			case ENUM:
			case MESSAGE:
			case EXTEND:
			case SERVICE:
			case RPC:
			case STREAM:
			case RETURNS:
			case IDENTIFIER:
			case INT_LITERAL:
			case FLOAT_LITERAL:
			case STRING_LITERAL:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 470;
				scalarValue();
				}
				break;
			case L_BRACE:
			case L_ANGLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 471;
				messageLiteral();
				}
				break;
			case L_BRACKET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 472;
				listLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageLiteralContext messageLiteral() {
			return GetRuleContext<MessageLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListOfMessagesLiteralContext listOfMessagesLiteral() {
			return GetRuleContext<ListOfMessagesLiteralContext>(0);
		}
		public MessageValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageValueContext messageValue() {
		MessageValueContext _localctx = new MessageValueContext(Context, State);
		EnterRule(_localctx, 82, RULE_messageValue);
		try {
			State = 477;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L_BRACE:
			case L_ANGLE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 475;
				messageLiteral();
				}
				break;
			case L_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476;
				listOfMessagesLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageLiteralWithBracesContext messageLiteralWithBraces() {
			return GetRuleContext<MessageLiteralWithBracesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_ANGLE() { return GetToken(ProtobufParser.L_ANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageTextFormatContext messageTextFormat() {
			return GetRuleContext<MessageTextFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ANGLE() { return GetToken(ProtobufParser.R_ANGLE, 0); }
		public MessageLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageLiteralContext messageLiteral() {
		MessageLiteralContext _localctx = new MessageLiteralContext(Context, State);
		EnterRule(_localctx, 84, RULE_messageLiteral);
		try {
			State = 484;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case L_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 479;
				messageLiteralWithBraces();
				}
				break;
			case L_ANGLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 480;
				Match(L_ANGLE);
				State = 481;
				messageTextFormat();
				State = 482;
				Match(R_ANGLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(ProtobufParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(ProtobufParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListElementContext[] listElement() {
			return GetRuleContexts<ListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListElementContext listElement(int i) {
			return GetRuleContext<ListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ProtobufParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ProtobufParser.COMMA, i);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListLiteralContext listLiteral() {
		ListLiteralContext _localctx = new ListLiteralContext(Context, State);
		EnterRule(_localctx, 86, RULE_listLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 486;
			Match(L_BRACKET);
			State = 495;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 5)) & ~0x3f) == 0 && ((1L << (_la - 5)) & 1229526678737256447L) != 0)) {
				{
				State = 487;
				listElement();
				State = 492;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 488;
					Match(COMMA);
					State = 489;
					listElement();
					}
					}
					State = 494;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 497;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageLiteralContext messageLiteral() {
			return GetRuleContext<MessageLiteralContext>(0);
		}
		public ListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListElementContext listElement() {
		ListElementContext _localctx = new ListElementContext(Context, State);
		EnterRule(_localctx, 88, RULE_listElement);
		try {
			State = 501;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case INF:
			case NAN:
			case REPEATED:
			case OPTIONAL:
			case REQUIRED:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case GROUP:
			case ONEOF:
			case MAP:
			case EXTENSIONS:
			case TO:
			case MAX:
			case RESERVED:
			case ENUM:
			case MESSAGE:
			case EXTEND:
			case SERVICE:
			case RPC:
			case STREAM:
			case RETURNS:
			case IDENTIFIER:
			case INT_LITERAL:
			case FLOAT_LITERAL:
			case STRING_LITERAL:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 499;
				scalarValue();
				}
				break;
			case L_BRACE:
			case L_ANGLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 500;
				messageLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListOfMessagesLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACKET() { return GetToken(ProtobufParser.L_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACKET() { return GetToken(ProtobufParser.R_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageLiteralContext[] messageLiteral() {
			return GetRuleContexts<MessageLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageLiteralContext messageLiteral(int i) {
			return GetRuleContext<MessageLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ProtobufParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ProtobufParser.COMMA, i);
		}
		public ListOfMessagesLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listOfMessagesLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListOfMessagesLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListOfMessagesLiteralContext listOfMessagesLiteral() {
		ListOfMessagesLiteralContext _localctx = new ListOfMessagesLiteralContext(Context, State);
		EnterRule(_localctx, 90, RULE_listOfMessagesLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503;
			Match(L_BRACKET);
			State = 512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_BRACE || _la==L_ANGLE) {
				{
				State = 504;
				messageLiteral();
				State = 509;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 505;
					Match(COMMA);
					State = 506;
					messageLiteral();
					}
					}
					State = 511;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 514;
			Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(ProtobufParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageNameContext messageName() {
			return GetRuleContext<MessageNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(ProtobufParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(ProtobufParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MessageElementContext[] messageElement() {
			return GetRuleContexts<MessageElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageElementContext messageElement(int i) {
			return GetRuleContext<MessageElementContext>(i);
		}
		public MessageDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageDeclContext messageDecl() {
		MessageDeclContext _localctx = new MessageDeclContext(Context, State);
		EnterRule(_localctx, 92, RULE_messageDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			Match(MESSAGE);
			State = 517;
			messageName();
			State = 518;
			Match(L_BRACE);
			State = 522;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11329367812603884L) != 0)) {
				{
				{
				State = 519;
				messageElement();
				}
				}
				State = 524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 525;
			Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MessageNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageNameContext messageName() {
		MessageNameContext _localctx = new MessageNameContext(Context, State);
		EnterRule(_localctx, 94, RULE_messageName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 527;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageFieldDeclContext messageFieldDecl() {
			return GetRuleContext<MessageFieldDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupDeclContext groupDecl() {
			return GetRuleContext<GroupDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OneofDeclContext oneofDecl() {
			return GetRuleContext<OneofDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionDeclContext optionDecl() {
			return GetRuleContext<OptionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionRangeDeclContext extensionRangeDecl() {
			return GetRuleContext<ExtensionRangeDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageReservedDeclContext messageReservedDecl() {
			return GetRuleContext<MessageReservedDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageDeclContext messageDecl() {
			return GetRuleContext<MessageDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclContext enumDecl() {
			return GetRuleContext<EnumDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionDeclContext extensionDecl() {
			return GetRuleContext<ExtensionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapFieldDeclContext mapFieldDecl() {
			return GetRuleContext<MapFieldDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyDeclContext emptyDecl() {
			return GetRuleContext<EmptyDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDeclContext commentDecl() {
			return GetRuleContext<CommentDeclContext>(0);
		}
		public MessageElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageElementContext messageElement() {
		MessageElementContext _localctx = new MessageElementContext(Context, State);
		EnterRule(_localctx, 96, RULE_messageElement);
		try {
			State = 541;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 529;
				messageFieldDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 530;
				groupDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 531;
				oneofDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 532;
				optionDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 533;
				extensionRangeDecl();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 534;
				messageReservedDecl();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 535;
				messageDecl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 536;
				enumDecl();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 537;
				extensionDecl();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 538;
				mapFieldDecl();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 539;
				emptyDecl();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 540;
				commentDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageFieldDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclWithCardinalityContext fieldDeclWithCardinality() {
			return GetRuleContext<FieldDeclWithCardinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageFieldDeclTypeNameContext messageFieldDeclTypeName() {
			return GetRuleContext<MessageFieldDeclTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ProtobufParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompactOptionsContext compactOptions() {
			return GetRuleContext<CompactOptionsContext>(0);
		}
		public MessageFieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageFieldDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageFieldDeclContext messageFieldDecl() {
		MessageFieldDeclContext _localctx = new MessageFieldDeclContext(Context, State);
		EnterRule(_localctx, 98, RULE_messageFieldDecl);
		int _la;
		try {
			State = 553;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPEATED:
			case OPTIONAL:
			case REQUIRED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543;
				fieldDeclWithCardinality();
				}
				break;
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case INF:
			case NAN:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case MAP:
			case TO:
			case MAX:
			case SERVICE:
			case RPC:
			case STREAM:
			case RETURNS:
			case IDENTIFIER:
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544;
				messageFieldDeclTypeName();
				State = 545;
				fieldName();
				State = 546;
				Match(EQUALS);
				State = 547;
				fieldNumber();
				State = 549;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==L_BRACKET) {
					{
					State = 548;
					compactOptions();
					}
				}

				State = 551;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclWithCardinalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldCardinalityContext fieldCardinality() {
			return GetRuleContext<FieldCardinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclTypeNameContext fieldDeclTypeName() {
			return GetRuleContext<FieldDeclTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ProtobufParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompactOptionsContext compactOptions() {
			return GetRuleContext<CompactOptionsContext>(0);
		}
		public FieldDeclWithCardinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclWithCardinality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclWithCardinality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclWithCardinalityContext fieldDeclWithCardinality() {
		FieldDeclWithCardinalityContext _localctx = new FieldDeclWithCardinalityContext(Context, State);
		EnterRule(_localctx, 100, RULE_fieldDeclWithCardinality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555;
			fieldCardinality();
			State = 556;
			fieldDeclTypeName();
			State = 557;
			fieldName();
			State = 558;
			Match(EQUALS);
			State = 559;
			fieldNumber();
			State = 561;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_BRACKET) {
				{
				State = 560;
				compactOptions();
				}
			}

			State = 563;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldCardinalityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRED() { return GetToken(ProtobufParser.REQUIRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(ProtobufParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATED() { return GetToken(ProtobufParser.REPEATED, 0); }
		public FieldCardinalityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldCardinality; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldCardinality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldCardinalityContext fieldCardinality() {
		FieldCardinalityContext _localctx = new FieldCardinalityContext(Context, State);
		EnterRule(_localctx, 102, RULE_fieldCardinality);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(Context, State);
		EnterRule(_localctx, 104, RULE_fieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LITERAL() { return GetToken(ProtobufParser.INT_LITERAL, 0); }
		public FieldNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNumberContext fieldNumber() {
		FieldNumberContext _localctx = new FieldNumberContext(Context, State);
		EnterRule(_localctx, 106, RULE_fieldNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 569;
			Match(INT_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapFieldDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MapTypeContext mapType() {
			return GetRuleContext<MapTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ProtobufParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompactOptionsContext compactOptions() {
			return GetRuleContext<CompactOptionsContext>(0);
		}
		public MapFieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapFieldDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapFieldDeclContext mapFieldDecl() {
		MapFieldDeclContext _localctx = new MapFieldDeclContext(Context, State);
		EnterRule(_localctx, 108, RULE_mapFieldDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 571;
			mapType();
			State = 572;
			fieldName();
			State = 573;
			Match(EQUALS);
			State = 574;
			fieldNumber();
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_BRACKET) {
				{
				State = 575;
				compactOptions();
				}
			}

			State = 578;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(ProtobufParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_ANGLE() { return GetToken(ProtobufParser.L_ANGLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MapKeyTypeContext mapKeyType() {
			return GetRuleContext<MapKeyTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(ProtobufParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_ANGLE() { return GetToken(ProtobufParser.R_ANGLE, 0); }
		public MapTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapTypeContext mapType() {
		MapTypeContext _localctx = new MapTypeContext(Context, State);
		EnterRule(_localctx, 110, RULE_mapType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			Match(MAP);
			State = 581;
			Match(L_ANGLE);
			State = 582;
			mapKeyType();
			State = 583;
			Match(COMMA);
			State = 584;
			typeName();
			State = 585;
			Match(R_ANGLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapKeyTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT32() { return GetToken(ProtobufParser.INT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT64() { return GetToken(ProtobufParser.INT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT32() { return GetToken(ProtobufParser.UINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT64() { return GetToken(ProtobufParser.UINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT32() { return GetToken(ProtobufParser.SINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT64() { return GetToken(ProtobufParser.SINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED32() { return GetToken(ProtobufParser.FIXED32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED64() { return GetToken(ProtobufParser.FIXED64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SFIXED32() { return GetToken(ProtobufParser.SFIXED32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SFIXED64() { return GetToken(ProtobufParser.SFIXED64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(ProtobufParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ProtobufParser.STRING, 0); }
		public MapKeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapKeyType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMapKeyType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapKeyTypeContext mapKeyType() {
		MapKeyTypeContext _localctx = new MapKeyTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_mapKeyType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 587;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 2145583104L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(ProtobufParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ProtobufParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(ProtobufParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(ProtobufParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldCardinalityContext fieldCardinality() {
			return GetRuleContext<FieldCardinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompactOptionsContext compactOptions() {
			return GetRuleContext<CompactOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageElementContext[] messageElement() {
			return GetRuleContexts<MessageElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageElementContext messageElement(int i) {
			return GetRuleContext<MessageElementContext>(i);
		}
		public GroupDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupDeclContext groupDecl() {
		GroupDeclContext _localctx = new GroupDeclContext(Context, State);
		EnterRule(_localctx, 114, RULE_groupDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 57344L) != 0)) {
				{
				State = 589;
				fieldCardinality();
				}
			}

			State = 592;
			Match(GROUP);
			State = 593;
			fieldName();
			State = 594;
			Match(EQUALS);
			State = 595;
			fieldNumber();
			State = 597;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_BRACKET) {
				{
				State = 596;
				compactOptions();
				}
			}

			State = 599;
			Match(L_BRACE);
			State = 603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11329367812603884L) != 0)) {
				{
				{
				State = 600;
				messageElement();
				}
				}
				State = 605;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 606;
			Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEOF() { return GetToken(ProtobufParser.ONEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OneofNameContext oneofName() {
			return GetRuleContext<OneofNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(ProtobufParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(ProtobufParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OneofElementContext[] oneofElement() {
			return GetRuleContexts<OneofElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OneofElementContext oneofElement(int i) {
			return GetRuleContext<OneofElementContext>(i);
		}
		public OneofDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneofDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofDeclContext oneofDecl() {
		OneofDeclContext _localctx = new OneofDeclContext(Context, State);
		EnterRule(_localctx, 116, RULE_oneofDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 608;
			Match(ONEOF);
			State = 609;
			oneofName();
			State = 610;
			Match(L_BRACE);
			State = 614;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9068771905896428L) != 0)) {
				{
				{
				State = 611;
				oneofElement();
				}
				}
				State = 616;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 617;
			Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OneofNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneofName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofNameContext oneofName() {
		OneofNameContext _localctx = new OneofNameContext(Context, State);
		EnterRule(_localctx, 118, RULE_oneofName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 619;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionDeclContext optionDecl() {
			return GetRuleContext<OptionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OneofFieldDeclContext oneofFieldDecl() {
			return GetRuleContext<OneofFieldDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OneofGroupDeclContext oneofGroupDecl() {
			return GetRuleContext<OneofGroupDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDeclContext commentDecl() {
			return GetRuleContext<CommentDeclContext>(0);
		}
		public OneofElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneofElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofElementContext oneofElement() {
		OneofElementContext _localctx = new OneofElementContext(Context, State);
		EnterRule(_localctx, 120, RULE_oneofElement);
		try {
			State = 625;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 621;
				optionDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 622;
				oneofFieldDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 623;
				oneofGroupDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 624;
				commentDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofFieldDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OneofFieldDeclTypeNameContext oneofFieldDeclTypeName() {
			return GetRuleContext<OneofFieldDeclTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ProtobufParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompactOptionsContext compactOptions() {
			return GetRuleContext<CompactOptionsContext>(0);
		}
		public OneofFieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofFieldDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneofFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofFieldDeclContext oneofFieldDecl() {
		OneofFieldDeclContext _localctx = new OneofFieldDeclContext(Context, State);
		EnterRule(_localctx, 122, RULE_oneofFieldDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627;
			oneofFieldDeclTypeName();
			State = 628;
			fieldName();
			State = 629;
			Match(EQUALS);
			State = 630;
			fieldNumber();
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_BRACKET) {
				{
				State = 631;
				compactOptions();
				}
			}

			State = 634;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OneofGroupDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(ProtobufParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ProtobufParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(ProtobufParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(ProtobufParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompactOptionsContext compactOptions() {
			return GetRuleContext<CompactOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageElementContext[] messageElement() {
			return GetRuleContexts<MessageElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MessageElementContext messageElement(int i) {
			return GetRuleContext<MessageElementContext>(i);
		}
		public OneofGroupDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oneofGroupDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOneofGroupDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OneofGroupDeclContext oneofGroupDecl() {
		OneofGroupDeclContext _localctx = new OneofGroupDeclContext(Context, State);
		EnterRule(_localctx, 124, RULE_oneofGroupDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 636;
			Match(GROUP);
			State = 637;
			fieldName();
			State = 638;
			Match(EQUALS);
			State = 639;
			fieldNumber();
			State = 641;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_BRACKET) {
				{
				State = 640;
				compactOptions();
				}
			}

			State = 643;
			Match(L_BRACE);
			State = 647;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 11329367812603884L) != 0)) {
				{
				{
				State = 644;
				messageElement();
				}
				}
				State = 649;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 650;
			Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionRangeDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSIONS() { return GetToken(ProtobufParser.EXTENSIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagRangesContext tagRanges() {
			return GetRuleContext<TagRangesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompactOptionsContext compactOptions() {
			return GetRuleContext<CompactOptionsContext>(0);
		}
		public ExtensionRangeDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionRangeDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionRangeDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionRangeDeclContext extensionRangeDecl() {
		ExtensionRangeDeclContext _localctx = new ExtensionRangeDeclContext(Context, State);
		EnterRule(_localctx, 126, RULE_extensionRangeDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(EXTENSIONS);
			State = 653;
			tagRanges();
			State = 655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_BRACKET) {
				{
				State = 654;
				compactOptions();
				}
			}

			State = 657;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagRangesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagRangeContext[] tagRange() {
			return GetRuleContexts<TagRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TagRangeContext tagRange(int i) {
			return GetRuleContext<TagRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ProtobufParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ProtobufParser.COMMA, i);
		}
		public TagRangesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagRanges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagRanges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagRangesContext tagRanges() {
		TagRangesContext _localctx = new TagRangesContext(Context, State);
		EnterRule(_localctx, 128, RULE_tagRanges);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			tagRange();
			State = 664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 660;
				Match(COMMA);
				State = 661;
				tagRange();
				}
				}
				State = 666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagRangeStartContext tagRangeStart() {
			return GetRuleContext<TagRangeStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ProtobufParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagRangeEndContext tagRangeEnd() {
			return GetRuleContext<TagRangeEndContext>(0);
		}
		public TagRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagRangeContext tagRange() {
		TagRangeContext _localctx = new TagRangeContext(Context, State);
		EnterRule(_localctx, 130, RULE_tagRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			tagRangeStart();
			State = 670;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 668;
				Match(TO);
				State = 669;
				tagRangeEnd();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagRangeStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		public TagRangeStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagRangeStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagRangeStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagRangeStartContext tagRangeStart() {
		TagRangeStartContext _localctx = new TagRangeStartContext(Context, State);
		EnterRule(_localctx, 132, RULE_tagRangeStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 672;
			fieldNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagRangeEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(ProtobufParser.MAX, 0); }
		public TagRangeEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagRangeEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTagRangeEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagRangeEndContext tagRangeEnd() {
		TagRangeEndContext _localctx = new TagRangeEndContext(Context, State);
		EnterRule(_localctx, 134, RULE_tagRangeEnd);
		try {
			State = 676;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 674;
				fieldNumber();
				}
				break;
			case MAX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 675;
				Match(MAX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageReservedDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVED() { return GetToken(ProtobufParser.RESERVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TagRangesContext tagRanges() {
			return GetRuleContext<TagRangesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamesContext names() {
			return GetRuleContext<NamesContext>(0);
		}
		public MessageReservedDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageReservedDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageReservedDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageReservedDeclContext messageReservedDecl() {
		MessageReservedDeclContext _localctx = new MessageReservedDeclContext(Context, State);
		EnterRule(_localctx, 136, RULE_messageReservedDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			Match(RESERVED);
			State = 681;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_LITERAL:
				{
				State = 679;
				tagRanges();
				}
				break;
			case STRING_LITERAL:
				{
				State = 680;
				names();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 683;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext[] stringLiteral() {
			return GetRuleContexts<StringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringLiteralContext stringLiteral(int i) {
			return GetRuleContext<StringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ProtobufParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ProtobufParser.COMMA, i);
		}
		public NamesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNames(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamesContext names() {
		NamesContext _localctx = new NamesContext(Context, State);
		EnterRule(_localctx, 138, RULE_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			stringLiteral();
			State = 690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 686;
				Match(COMMA);
				State = 687;
				stringLiteral();
				}
				}
				State = 692;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(ProtobufParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumNameContext enumName() {
			return GetRuleContext<EnumNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(ProtobufParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(ProtobufParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementContext[] enumElement() {
			return GetRuleContexts<EnumElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumElementContext enumElement(int i) {
			return GetRuleContext<EnumElementContext>(i);
		}
		public EnumDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclContext enumDecl() {
		EnumDeclContext _localctx = new EnumDeclContext(Context, State);
		EnterRule(_localctx, 140, RULE_enumDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			Match(ENUM);
			State = 694;
			enumName();
			State = 695;
			Match(L_BRACE);
			State = 699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2322168557862892L) != 0)) {
				{
				{
				State = 696;
				enumElement();
				}
				}
				State = 701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 702;
			Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumNameContext enumName() {
		EnumNameContext _localctx = new EnumNameContext(Context, State);
		EnterRule(_localctx, 142, RULE_enumName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 704;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionDeclContext optionDecl() {
			return GetRuleContext<OptionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueDeclContext enumValueDecl() {
			return GetRuleContext<EnumValueDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumReservedDeclContext enumReservedDecl() {
			return GetRuleContext<EnumReservedDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyDeclContext emptyDecl() {
			return GetRuleContext<EmptyDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDeclContext commentDecl() {
			return GetRuleContext<CommentDeclContext>(0);
		}
		public EnumElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumElementContext enumElement() {
		EnumElementContext _localctx = new EnumElementContext(Context, State);
		EnterRule(_localctx, 144, RULE_enumElement);
		try {
			State = 711;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 706;
				optionDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 707;
				enumValueDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 708;
				enumReservedDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 709;
				emptyDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 710;
				commentDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueNameContext enumValueName() {
			return GetRuleContext<EnumValueNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ProtobufParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueNumberContext enumValueNumber() {
			return GetRuleContext<EnumValueNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompactOptionsContext compactOptions() {
			return GetRuleContext<CompactOptionsContext>(0);
		}
		public EnumValueDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueDeclContext enumValueDecl() {
		EnumValueDeclContext _localctx = new EnumValueDeclContext(Context, State);
		EnterRule(_localctx, 146, RULE_enumValueDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 713;
			enumValueName();
			State = 714;
			Match(EQUALS);
			State = 715;
			enumValueNumber();
			State = 717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==L_BRACKET) {
				{
				State = 716;
				compactOptions();
				}
			}

			State = 719;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumValueNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueNameContext enumValueName() {
		EnumValueNameContext _localctx = new EnumValueNameContext(Context, State);
		EnterRule(_localctx, 148, RULE_enumValueName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 721;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_LITERAL() { return GetToken(ProtobufParser.INT_LITERAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(ProtobufParser.MINUS, 0); }
		public EnumValueNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueNumberContext enumValueNumber() {
		EnumValueNumberContext _localctx = new EnumValueNumberContext(Context, State);
		EnterRule(_localctx, 150, RULE_enumValueNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS) {
				{
				State = 723;
				Match(MINUS);
				}
			}

			State = 726;
			Match(INT_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumReservedDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVED() { return GetToken(ProtobufParser.RESERVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueRangesContext enumValueRanges() {
			return GetRuleContext<EnumValueRangesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamesContext names() {
			return GetRuleContext<NamesContext>(0);
		}
		public EnumReservedDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumReservedDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumReservedDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumReservedDeclContext enumReservedDecl() {
		EnumReservedDeclContext _localctx = new EnumReservedDeclContext(Context, State);
		EnterRule(_localctx, 152, RULE_enumReservedDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728;
			Match(RESERVED);
			State = 731;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_LITERAL:
			case MINUS:
				{
				State = 729;
				enumValueRanges();
				}
				break;
			case STRING_LITERAL:
				{
				State = 730;
				names();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 733;
			Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueRangesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueRangeContext[] enumValueRange() {
			return GetRuleContexts<EnumValueRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueRangeContext enumValueRange(int i) {
			return GetRuleContext<EnumValueRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(ProtobufParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(ProtobufParser.COMMA, i);
		}
		public EnumValueRangesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueRanges; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueRanges(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueRangesContext enumValueRanges() {
		EnumValueRangesContext _localctx = new EnumValueRangesContext(Context, State);
		EnterRule(_localctx, 154, RULE_enumValueRanges);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 735;
			enumValueRange();
			State = 740;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 736;
				Match(COMMA);
				State = 737;
				enumValueRange();
				}
				}
				State = 742;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueRangeStartContext enumValueRangeStart() {
			return GetRuleContext<EnumValueRangeStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ProtobufParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueRangeEndContext enumValueRangeEnd() {
			return GetRuleContext<EnumValueRangeEndContext>(0);
		}
		public EnumValueRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueRangeContext enumValueRange() {
		EnumValueRangeContext _localctx = new EnumValueRangeContext(Context, State);
		EnterRule(_localctx, 156, RULE_enumValueRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 743;
			enumValueRangeStart();
			State = 746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TO) {
				{
				State = 744;
				Match(TO);
				State = 745;
				enumValueRangeEnd();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueRangeStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueNumberContext enumValueNumber() {
			return GetRuleContext<EnumValueNumberContext>(0);
		}
		public EnumValueRangeStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueRangeStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueRangeStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueRangeStartContext enumValueRangeStart() {
		EnumValueRangeStartContext _localctx = new EnumValueRangeStartContext(Context, State);
		EnterRule(_localctx, 158, RULE_enumValueRangeStart);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 748;
			enumValueNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueRangeEndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EnumValueNumberContext enumValueNumber() {
			return GetRuleContext<EnumValueNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(ProtobufParser.MAX, 0); }
		public EnumValueRangeEndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValueRangeEnd; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumValueRangeEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueRangeEndContext enumValueRangeEnd() {
		EnumValueRangeEndContext _localctx = new EnumValueRangeEndContext(Context, State);
		EnterRule(_localctx, 160, RULE_enumValueRangeEnd);
		try {
			State = 752;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_LITERAL:
			case MINUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 750;
				enumValueNumber();
				}
				break;
			case MAX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 751;
				Match(MAX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(ProtobufParser.EXTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExtendedMessageContext extendedMessage() {
			return GetRuleContext<ExtendedMessageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(ProtobufParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(ProtobufParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionElementContext[] extensionElement() {
			return GetRuleContexts<ExtensionElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionElementContext extensionElement(int i) {
			return GetRuleContext<ExtensionElementContext>(i);
		}
		public ExtensionDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionDeclContext extensionDecl() {
		ExtensionDeclContext _localctx = new ExtensionDeclContext(Context, State);
		EnterRule(_localctx, 162, RULE_extensionDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 754;
			Match(EXTEND);
			State = 755;
			extendedMessage();
			State = 756;
			Match(L_BRACE);
			State = 760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9077567998918636L) != 0)) {
				{
				{
				State = 757;
				extensionElement();
				}
				}
				State = 762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 763;
			Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtendedMessageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExtendedMessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extendedMessage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtendedMessage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtendedMessageContext extendedMessage() {
		ExtendedMessageContext _localctx = new ExtendedMessageContext(Context, State);
		EnterRule(_localctx, 164, RULE_extendedMessage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 765;
			typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionFieldDeclContext extensionFieldDecl() {
			return GetRuleContext<ExtensionFieldDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupDeclContext groupDecl() {
			return GetRuleContext<GroupDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDeclContext commentDecl() {
			return GetRuleContext<CommentDeclContext>(0);
		}
		public ExtensionElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionElementContext extensionElement() {
		ExtensionElementContext _localctx = new ExtensionElementContext(Context, State);
		EnterRule(_localctx, 166, RULE_extensionElement);
		try {
			State = 770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 767;
				extensionFieldDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 768;
				groupDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 769;
				commentDecl();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionFieldDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldDeclWithCardinalityContext fieldDeclWithCardinality() {
			return GetRuleContext<FieldDeclWithCardinalityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionFieldDeclTypeNameContext extensionFieldDeclTypeName() {
			return GetRuleContext<ExtensionFieldDeclTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(ProtobufParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldNumberContext fieldNumber() {
			return GetRuleContext<FieldNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompactOptionsContext compactOptions() {
			return GetRuleContext<CompactOptionsContext>(0);
		}
		public ExtensionFieldDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionFieldDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtensionFieldDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionFieldDeclContext extensionFieldDecl() {
		ExtensionFieldDeclContext _localctx = new ExtensionFieldDeclContext(Context, State);
		EnterRule(_localctx, 168, RULE_extensionFieldDecl);
		int _la;
		try {
			State = 782;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPEATED:
			case OPTIONAL:
			case REQUIRED:
				EnterOuterAlt(_localctx, 1);
				{
				State = 772;
				fieldDeclWithCardinality();
				}
				break;
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case OPTION:
			case INF:
			case NAN:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case ONEOF:
			case MAP:
			case EXTENSIONS:
			case TO:
			case MAX:
			case RESERVED:
			case ENUM:
			case MESSAGE:
			case EXTEND:
			case SERVICE:
			case RPC:
			case STREAM:
			case RETURNS:
			case IDENTIFIER:
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 773;
				extensionFieldDeclTypeName();
				State = 774;
				fieldName();
				State = 775;
				Match(EQUALS);
				State = 776;
				fieldNumber();
				State = 778;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==L_BRACKET) {
					{
					State = 777;
					compactOptions();
					}
				}

				State = 780;
				Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(ProtobufParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServiceNameContext serviceName() {
			return GetRuleContext<ServiceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(ProtobufParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(ProtobufParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServiceElementContext[] serviceElement() {
			return GetRuleContexts<ServiceElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServiceElementContext serviceElement(int i) {
			return GetRuleContext<ServiceElementContext>(i);
		}
		public ServiceDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServiceDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceDeclContext serviceDecl() {
		ServiceDeclContext _localctx = new ServiceDeclContext(Context, State);
		EnterRule(_localctx, 170, RULE_serviceDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784;
			Match(SERVICE);
			State = 785;
			serviceName();
			State = 786;
			Match(L_BRACE);
			State = 790;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2256197860197388L) != 0)) {
				{
				{
				State = 787;
				serviceElement();
				}
				}
				State = 792;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 793;
			Match(R_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ServiceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServiceName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceNameContext serviceName() {
		ServiceNameContext _localctx = new ServiceNameContext(Context, State);
		EnterRule(_localctx, 172, RULE_serviceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 795;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServiceElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionDeclContext optionDecl() {
			return GetRuleContext<OptionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDeclContext commentDecl() {
			return GetRuleContext<CommentDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclContext methodDecl() {
			return GetRuleContext<MethodDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyDeclContext emptyDecl() {
			return GetRuleContext<EmptyDeclContext>(0);
		}
		public ServiceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serviceElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitServiceElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ServiceElementContext serviceElement() {
		ServiceElementContext _localctx = new ServiceElementContext(Context, State);
		EnterRule(_localctx, 174, RULE_serviceElement);
		try {
			State = 801;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 797;
				optionDecl();
				}
				break;
			case LINE_COMMENT:
			case BLOCK_COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 798;
				commentDecl();
				}
				break;
			case RPC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 799;
				methodDecl();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 4);
				{
				State = 800;
				emptyDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPC() { return GetToken(ProtobufParser.RPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InputTypeContext inputType() {
			return GetRuleContext<InputTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(ProtobufParser.RETURNS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OutputTypeContext outputType() {
			return GetRuleContext<OutputTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON() { return GetToken(ProtobufParser.SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_BRACE() { return GetToken(ProtobufParser.L_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_BRACE() { return GetToken(ProtobufParser.R_BRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodElementContext[] methodElement() {
			return GetRuleContexts<MethodElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodElementContext methodElement(int i) {
			return GetRuleContext<MethodElementContext>(i);
		}
		public MethodDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclContext methodDecl() {
		MethodDeclContext _localctx = new MethodDeclContext(Context, State);
		EnterRule(_localctx, 176, RULE_methodDecl);
		int _la;
		try {
			State = 826;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 803;
				Match(RPC);
				State = 804;
				methodName();
				State = 805;
				inputType();
				State = 806;
				Match(RETURNS);
				State = 807;
				outputType();
				State = 808;
				Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 810;
				Match(RPC);
				State = 811;
				methodName();
				State = 812;
				inputType();
				State = 813;
				Match(RETURNS);
				State = 814;
				outputType();
				State = 815;
				Match(L_BRACE);
				State = 819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 2251799813686284L) != 0)) {
					{
					{
					State = 816;
					methodElement();
					}
					}
					State = 821;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 822;
				Match(R_BRACE);
				State = 824;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
				case 1:
					{
					State = 823;
					Match(SEMICOLON);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 178, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 828;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageTypeContext messageType() {
			return GetRuleContext<MessageTypeContext>(0);
		}
		public InputTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputTypeContext inputType() {
		InputTypeContext _localctx = new InputTypeContext(Context, State);
		EnterRule(_localctx, 180, RULE_inputType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830;
			messageType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MessageTypeContext messageType() {
			return GetRuleContext<MessageTypeContext>(0);
		}
		public OutputTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputTypeContext outputType() {
		OutputTypeContext _localctx = new OutputTypeContext(Context, State);
		EnterRule(_localctx, 182, RULE_outputType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 832;
			messageType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionDeclContext optionDecl() {
			return GetRuleContext<OptionDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentDeclContext commentDecl() {
			return GetRuleContext<CommentDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmptyDeclContext emptyDecl() {
			return GetRuleContext<EmptyDeclContext>(0);
		}
		public MethodElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodElementContext methodElement() {
		MethodElementContext _localctx = new MethodElementContext(Context, State);
		EnterRule(_localctx, 184, RULE_methodElement);
		try {
			State = 837;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPTION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 834;
				optionDecl();
				}
				break;
			case LINE_COMMENT:
			case BLOCK_COMMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 835;
				commentDecl();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 3);
				{
				State = 836;
				emptyDecl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode L_PAREN() { return GetToken(ProtobufParser.L_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MethodDeclTypeNameContext methodDeclTypeName() {
			return GetRuleContext<MethodDeclTypeNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode R_PAREN() { return GetToken(ProtobufParser.R_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(ProtobufParser.STREAM, 0); }
		public MessageTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessageType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageTypeContext messageType() {
		MessageTypeContext _localctx = new MessageTypeContext(Context, State);
		EnterRule(_localctx, 186, RULE_messageType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 839;
			Match(L_PAREN);
			State = 841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STREAM) {
				{
				State = 840;
				Match(STREAM);
				}
			}

			State = 843;
			methodDeclTypeName();
			State = 844;
			Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlwaysIdentContext alwaysIdent() {
			return GetRuleContext<AlwaysIdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SometimesIdentContext sometimesIdent() {
			return GetRuleContext<SometimesIdentContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 188, RULE_identifier);
		try {
			State = 848;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SYNTAX:
			case IMPORT:
			case WEAK:
			case PUBLIC:
			case PACKAGE:
			case INF:
			case NAN:
			case BOOL:
			case STRING:
			case BYTES:
			case FLOAT:
			case DOUBLE:
			case INT32:
			case INT64:
			case UINT32:
			case UINT64:
			case SINT32:
			case SINT64:
			case FIXED32:
			case FIXED64:
			case SFIXED32:
			case SFIXED64:
			case MAP:
			case TO:
			case MAX:
			case SERVICE:
			case RPC:
			case RETURNS:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 846;
				alwaysIdent();
				}
				break;
			case OPTION:
			case REPEATED:
			case OPTIONAL:
			case REQUIRED:
			case GROUP:
			case ONEOF:
			case EXTENSIONS:
			case RESERVED:
			case ENUM:
			case MESSAGE:
			case EXTEND:
			case STREAM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 847;
				sometimesIdent();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlwaysIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(ProtobufParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYNTAX() { return GetToken(ProtobufParser.SYNTAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(ProtobufParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEAK() { return GetToken(ProtobufParser.WEAK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLIC() { return GetToken(ProtobufParser.PUBLIC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACKAGE() { return GetToken(ProtobufParser.PACKAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INF() { return GetToken(ProtobufParser.INF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAN() { return GetToken(ProtobufParser.NAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(ProtobufParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ProtobufParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES() { return GetToken(ProtobufParser.BYTES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(ProtobufParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(ProtobufParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT32() { return GetToken(ProtobufParser.INT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT64() { return GetToken(ProtobufParser.INT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT32() { return GetToken(ProtobufParser.UINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UINT64() { return GetToken(ProtobufParser.UINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT32() { return GetToken(ProtobufParser.SINT32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINT64() { return GetToken(ProtobufParser.SINT64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED32() { return GetToken(ProtobufParser.FIXED32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED64() { return GetToken(ProtobufParser.FIXED64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SFIXED32() { return GetToken(ProtobufParser.SFIXED32, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SFIXED64() { return GetToken(ProtobufParser.SFIXED64, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAP() { return GetToken(ProtobufParser.MAP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO() { return GetToken(ProtobufParser.TO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX() { return GetToken(ProtobufParser.MAX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVICE() { return GetToken(ProtobufParser.SERVICE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPC() { return GetToken(ProtobufParser.RPC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS() { return GetToken(ProtobufParser.RETURNS, 0); }
		public AlwaysIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alwaysIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlwaysIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlwaysIdentContext alwaysIdent() {
		AlwaysIdentContext _localctx = new AlwaysIdentContext(Context, State);
		EnterRule(_localctx, 190, RULE_alwaysIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 59487444474848L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SometimesIdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE() { return GetToken(ProtobufParser.MESSAGE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(ProtobufParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONEOF() { return GetToken(ProtobufParser.ONEOF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESERVED() { return GetToken(ProtobufParser.RESERVED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENSIONS() { return GetToken(ProtobufParser.EXTENSIONS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTEND() { return GetToken(ProtobufParser.EXTEND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION() { return GetToken(ProtobufParser.OPTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL() { return GetToken(ProtobufParser.OPTIONAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRED() { return GetToken(ProtobufParser.REQUIRED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATED() { return GetToken(ProtobufParser.REPEATED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP() { return GetToken(ProtobufParser.GROUP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM() { return GetToken(ProtobufParser.STREAM, 0); }
		public SometimesIdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sometimesIdent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProtobufParserVisitor<TResult> typedVisitor = visitor as IProtobufParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSometimesIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SometimesIdentContext sometimesIdent() {
		SometimesIdentContext _localctx = new SometimesIdentContext(Context, State);
		EnterRule(_localctx, 192, RULE_sometimesIdent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 852;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 10881299702784L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,66,855,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,3,0,196,8,0,1,0,
		5,0,199,8,0,10,0,12,0,202,9,0,1,0,3,0,205,8,0,1,0,5,0,208,8,0,10,0,12,
		0,211,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,224,8,1,1,2,
		1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,4,5,236,8,5,11,5,12,5,237,1,6,1,6,
		1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,3,9,250,8,9,1,9,1,9,1,9,1,10,1,10,1,11,
		3,11,258,8,11,1,11,1,11,1,12,1,12,1,12,5,12,265,8,12,10,12,12,12,268,9,
		12,1,13,1,13,1,13,3,13,273,8,13,1,13,3,13,276,8,13,1,14,1,14,1,14,3,14,
		281,8,14,1,14,3,14,284,8,14,1,15,1,15,1,15,3,15,289,8,15,1,15,3,15,292,
		8,15,1,16,1,16,1,16,3,16,297,8,16,1,16,3,16,300,8,16,1,17,1,17,1,17,3,
		17,305,8,17,1,17,3,17,308,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,18,1,18,1,18,1,18,3,18,322,8,18,1,19,1,19,3,19,326,8,19,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,337,8,20,1,21,1,21,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,351,8,21,1,22,1,22,1,22,1,22,1,
		22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,365,8,22,1,23,1,23,1,23,1,24,
		1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,380,8,25,10,25,12,25,
		383,9,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,3,27,396,
		8,27,1,27,1,27,5,27,400,8,27,10,27,12,27,403,9,27,1,28,1,28,3,28,407,8,
		28,1,29,1,29,1,29,1,29,1,29,3,29,414,8,29,1,30,3,30,417,8,30,1,30,1,30,
		1,31,3,31,422,8,31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,430,8,32,1,33,1,
		33,1,33,1,33,1,34,1,34,3,34,438,8,34,5,34,440,8,34,10,34,12,34,443,9,34,
		1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,452,8,35,1,36,1,36,1,36,1,36,1,
		36,3,36,459,8,36,1,37,1,37,3,37,463,8,37,1,38,1,38,1,39,1,39,1,39,1,39,
		1,40,1,40,1,40,3,40,474,8,40,1,41,1,41,3,41,478,8,41,1,42,1,42,1,42,1,
		42,1,42,3,42,485,8,42,1,43,1,43,1,43,1,43,5,43,491,8,43,10,43,12,43,494,
		9,43,3,43,496,8,43,1,43,1,43,1,44,1,44,3,44,502,8,44,1,45,1,45,1,45,1,
		45,5,45,508,8,45,10,45,12,45,511,9,45,3,45,513,8,45,1,45,1,45,1,46,1,46,
		1,46,1,46,5,46,521,8,46,10,46,12,46,524,9,46,1,46,1,46,1,47,1,47,1,48,
		1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,542,8,48,1,
		49,1,49,1,49,1,49,1,49,1,49,3,49,550,8,49,1,49,1,49,3,49,554,8,49,1,50,
		1,50,1,50,1,50,1,50,1,50,3,50,562,8,50,1,50,1,50,1,51,1,51,1,52,1,52,1,
		53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,577,8,54,1,54,1,54,1,55,1,55,1,55,
		1,55,1,55,1,55,1,55,1,56,1,56,1,57,3,57,591,8,57,1,57,1,57,1,57,1,57,1,
		57,3,57,598,8,57,1,57,1,57,5,57,602,8,57,10,57,12,57,605,9,57,1,57,1,57,
		1,58,1,58,1,58,1,58,5,58,613,8,58,10,58,12,58,616,9,58,1,58,1,58,1,59,
		1,59,1,60,1,60,1,60,1,60,3,60,626,8,60,1,61,1,61,1,61,1,61,1,61,3,61,633,
		8,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,3,62,642,8,62,1,62,1,62,5,62,646,
		8,62,10,62,12,62,649,9,62,1,62,1,62,1,63,1,63,1,63,3,63,656,8,63,1,63,
		1,63,1,64,1,64,1,64,5,64,663,8,64,10,64,12,64,666,9,64,1,65,1,65,1,65,
		3,65,671,8,65,1,66,1,66,1,67,1,67,3,67,677,8,67,1,68,1,68,1,68,3,68,682,
		8,68,1,68,1,68,1,69,1,69,1,69,5,69,689,8,69,10,69,12,69,692,9,69,1,70,
		1,70,1,70,1,70,5,70,698,8,70,10,70,12,70,701,9,70,1,70,1,70,1,71,1,71,
		1,72,1,72,1,72,1,72,1,72,3,72,712,8,72,1,73,1,73,1,73,1,73,3,73,718,8,
		73,1,73,1,73,1,74,1,74,1,75,3,75,725,8,75,1,75,1,75,1,76,1,76,1,76,3,76,
		732,8,76,1,76,1,76,1,77,1,77,1,77,5,77,739,8,77,10,77,12,77,742,9,77,1,
		78,1,78,1,78,3,78,747,8,78,1,79,1,79,1,80,1,80,3,80,753,8,80,1,81,1,81,
		1,81,1,81,5,81,759,8,81,10,81,12,81,762,9,81,1,81,1,81,1,82,1,82,1,83,
		1,83,1,83,3,83,771,8,83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,779,8,84,1,
		84,1,84,3,84,783,8,84,1,85,1,85,1,85,1,85,5,85,789,8,85,10,85,12,85,792,
		9,85,1,85,1,85,1,86,1,86,1,87,1,87,1,87,1,87,3,87,802,8,87,1,88,1,88,1,
		88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,5,88,818,8,88,
		10,88,12,88,821,9,88,1,88,1,88,3,88,825,8,88,3,88,827,8,88,1,89,1,89,1,
		90,1,90,1,91,1,91,1,92,1,92,1,92,3,92,838,8,92,1,93,1,93,3,93,842,8,93,
		1,93,1,93,1,93,1,94,1,94,3,94,849,8,94,1,95,1,95,1,96,1,96,1,96,0,0,97,
		0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
		50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
		98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
		134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
		170,172,174,176,178,180,182,184,186,188,190,192,0,7,1,0,2,3,1,0,7,8,1,
		0,51,52,1,0,13,15,2,0,16,17,21,30,7,0,5,9,11,12,16,30,33,33,35,36,41,42,
		44,45,6,0,10,10,13,15,31,32,34,34,37,40,43,43,909,0,195,1,0,0,0,2,223,
		1,0,0,0,4,225,1,0,0,0,6,227,1,0,0,0,8,232,1,0,0,0,10,235,1,0,0,0,12,239,
		1,0,0,0,14,241,1,0,0,0,16,245,1,0,0,0,18,247,1,0,0,0,20,254,1,0,0,0,22,
		257,1,0,0,0,24,261,1,0,0,0,26,275,1,0,0,0,28,283,1,0,0,0,30,291,1,0,0,
		0,32,299,1,0,0,0,34,307,1,0,0,0,36,321,1,0,0,0,38,325,1,0,0,0,40,336,1,
		0,0,0,42,350,1,0,0,0,44,364,1,0,0,0,46,366,1,0,0,0,48,369,1,0,0,0,50,375,
		1,0,0,0,52,386,1,0,0,0,54,395,1,0,0,0,56,406,1,0,0,0,58,413,1,0,0,0,60,
		416,1,0,0,0,62,421,1,0,0,0,64,429,1,0,0,0,66,431,1,0,0,0,68,441,1,0,0,
		0,70,451,1,0,0,0,72,458,1,0,0,0,74,462,1,0,0,0,76,464,1,0,0,0,78,466,1,
		0,0,0,80,473,1,0,0,0,82,477,1,0,0,0,84,484,1,0,0,0,86,486,1,0,0,0,88,501,
		1,0,0,0,90,503,1,0,0,0,92,516,1,0,0,0,94,527,1,0,0,0,96,541,1,0,0,0,98,
		553,1,0,0,0,100,555,1,0,0,0,102,565,1,0,0,0,104,567,1,0,0,0,106,569,1,
		0,0,0,108,571,1,0,0,0,110,580,1,0,0,0,112,587,1,0,0,0,114,590,1,0,0,0,
		116,608,1,0,0,0,118,619,1,0,0,0,120,625,1,0,0,0,122,627,1,0,0,0,124,636,
		1,0,0,0,126,652,1,0,0,0,128,659,1,0,0,0,130,667,1,0,0,0,132,672,1,0,0,
		0,134,676,1,0,0,0,136,678,1,0,0,0,138,685,1,0,0,0,140,693,1,0,0,0,142,
		704,1,0,0,0,144,711,1,0,0,0,146,713,1,0,0,0,148,721,1,0,0,0,150,724,1,
		0,0,0,152,728,1,0,0,0,154,735,1,0,0,0,156,743,1,0,0,0,158,748,1,0,0,0,
		160,752,1,0,0,0,162,754,1,0,0,0,164,765,1,0,0,0,166,770,1,0,0,0,168,782,
		1,0,0,0,170,784,1,0,0,0,172,795,1,0,0,0,174,801,1,0,0,0,176,826,1,0,0,
		0,178,828,1,0,0,0,180,830,1,0,0,0,182,832,1,0,0,0,184,837,1,0,0,0,186,
		839,1,0,0,0,188,848,1,0,0,0,190,850,1,0,0,0,192,852,1,0,0,0,194,196,5,
		4,0,0,195,194,1,0,0,0,195,196,1,0,0,0,196,200,1,0,0,0,197,199,3,4,2,0,
		198,197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,204,
		1,0,0,0,202,200,1,0,0,0,203,205,3,6,3,0,204,203,1,0,0,0,204,205,1,0,0,
		0,205,209,1,0,0,0,206,208,3,2,1,0,207,206,1,0,0,0,208,211,1,0,0,0,209,
		207,1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,213,5,
		0,0,1,213,1,1,0,0,0,214,224,3,18,9,0,215,224,3,14,7,0,216,224,3,48,24,
		0,217,224,3,92,46,0,218,224,3,140,70,0,219,224,3,162,81,0,220,224,3,170,
		85,0,221,224,3,12,6,0,222,224,3,4,2,0,223,214,1,0,0,0,223,215,1,0,0,0,
		223,216,1,0,0,0,223,217,1,0,0,0,223,218,1,0,0,0,223,219,1,0,0,0,223,220,
		1,0,0,0,223,221,1,0,0,0,223,222,1,0,0,0,224,3,1,0,0,0,225,226,7,0,0,0,
		226,5,1,0,0,0,227,228,5,5,0,0,228,229,5,56,0,0,229,230,3,8,4,0,230,231,
		5,51,0,0,231,7,1,0,0,0,232,233,3,10,5,0,233,9,1,0,0,0,234,236,5,50,0,0,
		235,234,1,0,0,0,236,237,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,11,
		1,0,0,0,239,240,5,51,0,0,240,13,1,0,0,0,241,242,5,9,0,0,242,243,3,16,8,
		0,243,244,5,51,0,0,244,15,1,0,0,0,245,246,3,24,12,0,246,17,1,0,0,0,247,
		249,5,6,0,0,248,250,7,1,0,0,249,248,1,0,0,0,249,250,1,0,0,0,250,251,1,
		0,0,0,251,252,3,20,10,0,252,253,5,51,0,0,253,19,1,0,0,0,254,255,3,10,5,
		0,255,21,1,0,0,0,256,258,5,53,0,0,257,256,1,0,0,0,257,258,1,0,0,0,258,
		259,1,0,0,0,259,260,3,24,12,0,260,23,1,0,0,0,261,266,3,188,94,0,262,263,
		5,53,0,0,263,265,3,188,94,0,264,262,1,0,0,0,265,268,1,0,0,0,266,264,1,
		0,0,0,266,267,1,0,0,0,267,25,1,0,0,0,268,266,1,0,0,0,269,272,3,36,18,0,
		270,271,5,53,0,0,271,273,3,24,12,0,272,270,1,0,0,0,272,273,1,0,0,0,273,
		276,1,0,0,0,274,276,3,46,23,0,275,269,1,0,0,0,275,274,1,0,0,0,276,27,1,
		0,0,0,277,280,3,38,19,0,278,279,5,53,0,0,279,281,3,24,12,0,280,278,1,0,
		0,0,280,281,1,0,0,0,281,284,1,0,0,0,282,284,3,46,23,0,283,277,1,0,0,0,
		283,282,1,0,0,0,284,29,1,0,0,0,285,288,3,40,20,0,286,287,5,53,0,0,287,
		289,3,24,12,0,288,286,1,0,0,0,288,289,1,0,0,0,289,292,1,0,0,0,290,292,
		3,46,23,0,291,285,1,0,0,0,291,290,1,0,0,0,292,31,1,0,0,0,293,296,3,42,
		21,0,294,295,5,53,0,0,295,297,3,24,12,0,296,294,1,0,0,0,296,297,1,0,0,
		0,297,300,1,0,0,0,298,300,3,46,23,0,299,293,1,0,0,0,299,298,1,0,0,0,300,
		33,1,0,0,0,301,304,3,44,22,0,302,303,5,53,0,0,303,305,3,24,12,0,304,302,
		1,0,0,0,304,305,1,0,0,0,305,308,1,0,0,0,306,308,3,46,23,0,307,301,1,0,
		0,0,307,306,1,0,0,0,308,35,1,0,0,0,309,322,3,190,95,0,310,322,5,39,0,0,
		311,322,5,38,0,0,312,322,5,32,0,0,313,322,5,37,0,0,314,322,5,34,0,0,315,
		322,5,40,0,0,316,322,5,10,0,0,317,322,5,14,0,0,318,322,5,15,0,0,319,322,
		5,13,0,0,320,322,5,43,0,0,321,309,1,0,0,0,321,310,1,0,0,0,321,311,1,0,
		0,0,321,312,1,0,0,0,321,313,1,0,0,0,321,314,1,0,0,0,321,315,1,0,0,0,321,
		316,1,0,0,0,321,317,1,0,0,0,321,318,1,0,0,0,321,319,1,0,0,0,321,320,1,
		0,0,0,322,37,1,0,0,0,323,326,3,190,95,0,324,326,5,43,0,0,325,323,1,0,0,
		0,325,324,1,0,0,0,326,39,1,0,0,0,327,337,3,190,95,0,328,337,5,39,0,0,329,
		337,5,38,0,0,330,337,5,32,0,0,331,337,5,37,0,0,332,337,5,34,0,0,333,337,
		5,40,0,0,334,337,5,10,0,0,335,337,5,43,0,0,336,327,1,0,0,0,336,328,1,0,
		0,0,336,329,1,0,0,0,336,330,1,0,0,0,336,331,1,0,0,0,336,332,1,0,0,0,336,
		333,1,0,0,0,336,334,1,0,0,0,336,335,1,0,0,0,337,41,1,0,0,0,338,351,3,190,
		95,0,339,351,5,39,0,0,340,351,5,38,0,0,341,351,5,32,0,0,342,351,5,37,0,
		0,343,351,5,34,0,0,344,351,5,40,0,0,345,351,5,10,0,0,346,351,5,14,0,0,
		347,351,5,15,0,0,348,351,5,13,0,0,349,351,5,31,0,0,350,338,1,0,0,0,350,
		339,1,0,0,0,350,340,1,0,0,0,350,341,1,0,0,0,350,342,1,0,0,0,350,343,1,
		0,0,0,350,344,1,0,0,0,350,345,1,0,0,0,350,346,1,0,0,0,350,347,1,0,0,0,
		350,348,1,0,0,0,350,349,1,0,0,0,351,43,1,0,0,0,352,365,3,190,95,0,353,
		365,5,39,0,0,354,365,5,38,0,0,355,365,5,32,0,0,356,365,5,37,0,0,357,365,
		5,34,0,0,358,365,5,40,0,0,359,365,5,10,0,0,360,365,5,14,0,0,361,365,5,
		15,0,0,362,365,5,13,0,0,363,365,5,31,0,0,364,352,1,0,0,0,364,353,1,0,0,
		0,364,354,1,0,0,0,364,355,1,0,0,0,364,356,1,0,0,0,364,357,1,0,0,0,364,
		358,1,0,0,0,364,359,1,0,0,0,364,360,1,0,0,0,364,361,1,0,0,0,364,362,1,
		0,0,0,364,363,1,0,0,0,365,45,1,0,0,0,366,367,5,53,0,0,367,368,3,24,12,
		0,368,47,1,0,0,0,369,370,5,10,0,0,370,371,3,54,27,0,371,372,5,56,0,0,372,
		373,3,56,28,0,373,374,5,51,0,0,374,49,1,0,0,0,375,376,5,63,0,0,376,381,
		3,52,26,0,377,378,5,52,0,0,378,380,3,52,26,0,379,377,1,0,0,0,380,383,1,
		0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,381,1,0,0,0,
		384,385,5,64,0,0,385,51,1,0,0,0,386,387,3,54,27,0,387,388,5,56,0,0,388,
		389,3,56,28,0,389,53,1,0,0,0,390,396,3,188,94,0,391,392,5,59,0,0,392,393,
		3,22,11,0,393,394,5,60,0,0,394,396,1,0,0,0,395,390,1,0,0,0,395,391,1,0,
		0,0,396,401,1,0,0,0,397,398,5,53,0,0,398,400,3,54,27,0,399,397,1,0,0,0,
		400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,55,1,0,0,0,403,401,
		1,0,0,0,404,407,3,58,29,0,405,407,3,66,33,0,406,404,1,0,0,0,406,405,1,
		0,0,0,407,57,1,0,0,0,408,414,3,10,5,0,409,414,3,60,30,0,410,414,3,62,31,
		0,411,414,3,64,32,0,412,414,3,188,94,0,413,408,1,0,0,0,413,409,1,0,0,0,
		413,410,1,0,0,0,413,411,1,0,0,0,413,412,1,0,0,0,414,59,1,0,0,0,415,417,
		5,57,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,418,1,0,0,0,418,419,5,46,
		0,0,419,61,1,0,0,0,420,422,5,57,0,0,421,420,1,0,0,0,421,422,1,0,0,0,422,
		423,1,0,0,0,423,424,5,47,0,0,424,63,1,0,0,0,425,426,5,57,0,0,426,430,5,
		11,0,0,427,428,5,57,0,0,428,430,5,12,0,0,429,425,1,0,0,0,429,427,1,0,0,
		0,430,65,1,0,0,0,431,432,5,61,0,0,432,433,3,68,34,0,433,434,5,62,0,0,434,
		67,1,0,0,0,435,437,3,70,35,0,436,438,7,2,0,0,437,436,1,0,0,0,437,438,1,
		0,0,0,438,440,1,0,0,0,439,435,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,
		441,442,1,0,0,0,442,69,1,0,0,0,443,441,1,0,0,0,444,445,3,72,36,0,445,446,
		5,55,0,0,446,447,3,80,40,0,447,452,1,0,0,0,448,449,3,72,36,0,449,450,3,
		82,41,0,450,452,1,0,0,0,451,444,1,0,0,0,451,448,1,0,0,0,452,71,1,0,0,0,
		453,459,3,104,52,0,454,455,5,63,0,0,455,456,3,74,37,0,456,457,5,64,0,0,
		457,459,1,0,0,0,458,453,1,0,0,0,458,454,1,0,0,0,459,73,1,0,0,0,460,463,
		3,76,38,0,461,463,3,78,39,0,462,460,1,0,0,0,462,461,1,0,0,0,463,75,1,0,
		0,0,464,465,3,24,12,0,465,77,1,0,0,0,466,467,3,24,12,0,467,468,5,54,0,
		0,468,469,3,24,12,0,469,79,1,0,0,0,470,474,3,58,29,0,471,474,3,84,42,0,
		472,474,3,86,43,0,473,470,1,0,0,0,473,471,1,0,0,0,473,472,1,0,0,0,474,
		81,1,0,0,0,475,478,3,84,42,0,476,478,3,90,45,0,477,475,1,0,0,0,477,476,
		1,0,0,0,478,83,1,0,0,0,479,485,3,66,33,0,480,481,5,65,0,0,481,482,3,68,
		34,0,482,483,5,66,0,0,483,485,1,0,0,0,484,479,1,0,0,0,484,480,1,0,0,0,
		485,85,1,0,0,0,486,495,5,63,0,0,487,492,3,88,44,0,488,489,5,52,0,0,489,
		491,3,88,44,0,490,488,1,0,0,0,491,494,1,0,0,0,492,490,1,0,0,0,492,493,
		1,0,0,0,493,496,1,0,0,0,494,492,1,0,0,0,495,487,1,0,0,0,495,496,1,0,0,
		0,496,497,1,0,0,0,497,498,5,64,0,0,498,87,1,0,0,0,499,502,3,58,29,0,500,
		502,3,84,42,0,501,499,1,0,0,0,501,500,1,0,0,0,502,89,1,0,0,0,503,512,5,
		63,0,0,504,509,3,84,42,0,505,506,5,52,0,0,506,508,3,84,42,0,507,505,1,
		0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,513,1,0,0,0,
		511,509,1,0,0,0,512,504,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,515,
		5,64,0,0,515,91,1,0,0,0,516,517,5,39,0,0,517,518,3,94,47,0,518,522,5,61,
		0,0,519,521,3,96,48,0,520,519,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,
		522,523,1,0,0,0,523,525,1,0,0,0,524,522,1,0,0,0,525,526,5,62,0,0,526,93,
		1,0,0,0,527,528,3,188,94,0,528,95,1,0,0,0,529,542,3,98,49,0,530,542,3,
		114,57,0,531,542,3,116,58,0,532,542,3,48,24,0,533,542,3,126,63,0,534,542,
		3,136,68,0,535,542,3,92,46,0,536,542,3,140,70,0,537,542,3,162,81,0,538,
		542,3,108,54,0,539,542,3,12,6,0,540,542,3,4,2,0,541,529,1,0,0,0,541,530,
		1,0,0,0,541,531,1,0,0,0,541,532,1,0,0,0,541,533,1,0,0,0,541,534,1,0,0,
		0,541,535,1,0,0,0,541,536,1,0,0,0,541,537,1,0,0,0,541,538,1,0,0,0,541,
		539,1,0,0,0,541,540,1,0,0,0,542,97,1,0,0,0,543,554,3,100,50,0,544,545,
		3,28,14,0,545,546,3,104,52,0,546,547,5,56,0,0,547,549,3,106,53,0,548,550,
		3,50,25,0,549,548,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,552,5,51,
		0,0,552,554,1,0,0,0,553,543,1,0,0,0,553,544,1,0,0,0,554,99,1,0,0,0,555,
		556,3,102,51,0,556,557,3,26,13,0,557,558,3,104,52,0,558,559,5,56,0,0,559,
		561,3,106,53,0,560,562,3,50,25,0,561,560,1,0,0,0,561,562,1,0,0,0,562,563,
		1,0,0,0,563,564,5,51,0,0,564,101,1,0,0,0,565,566,7,3,0,0,566,103,1,0,0,
		0,567,568,3,188,94,0,568,105,1,0,0,0,569,570,5,46,0,0,570,107,1,0,0,0,
		571,572,3,110,55,0,572,573,3,104,52,0,573,574,5,56,0,0,574,576,3,106,53,
		0,575,577,3,50,25,0,576,575,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,
		579,5,51,0,0,579,109,1,0,0,0,580,581,5,33,0,0,581,582,5,65,0,0,582,583,
		3,112,56,0,583,584,5,52,0,0,584,585,3,22,11,0,585,586,5,66,0,0,586,111,
		1,0,0,0,587,588,7,4,0,0,588,113,1,0,0,0,589,591,3,102,51,0,590,589,1,0,
		0,0,590,591,1,0,0,0,591,592,1,0,0,0,592,593,5,31,0,0,593,594,3,104,52,
		0,594,595,5,56,0,0,595,597,3,106,53,0,596,598,3,50,25,0,597,596,1,0,0,
		0,597,598,1,0,0,0,598,599,1,0,0,0,599,603,5,61,0,0,600,602,3,96,48,0,601,
		600,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,606,1,
		0,0,0,605,603,1,0,0,0,606,607,5,62,0,0,607,115,1,0,0,0,608,609,5,32,0,
		0,609,610,3,118,59,0,610,614,5,61,0,0,611,613,3,120,60,0,612,611,1,0,0,
		0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,
		614,1,0,0,0,617,618,5,62,0,0,618,117,1,0,0,0,619,620,3,188,94,0,620,119,
		1,0,0,0,621,626,3,48,24,0,622,626,3,122,61,0,623,626,3,124,62,0,624,626,
		3,4,2,0,625,621,1,0,0,0,625,622,1,0,0,0,625,623,1,0,0,0,625,624,1,0,0,
		0,626,121,1,0,0,0,627,628,3,32,16,0,628,629,3,104,52,0,629,630,5,56,0,
		0,630,632,3,106,53,0,631,633,3,50,25,0,632,631,1,0,0,0,632,633,1,0,0,0,
		633,634,1,0,0,0,634,635,5,51,0,0,635,123,1,0,0,0,636,637,5,31,0,0,637,
		638,3,104,52,0,638,639,5,56,0,0,639,641,3,106,53,0,640,642,3,50,25,0,641,
		640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,647,5,61,0,0,644,646,3,
		96,48,0,645,644,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,
		0,648,650,1,0,0,0,649,647,1,0,0,0,650,651,5,62,0,0,651,125,1,0,0,0,652,
		653,5,34,0,0,653,655,3,128,64,0,654,656,3,50,25,0,655,654,1,0,0,0,655,
		656,1,0,0,0,656,657,1,0,0,0,657,658,5,51,0,0,658,127,1,0,0,0,659,664,3,
		130,65,0,660,661,5,52,0,0,661,663,3,130,65,0,662,660,1,0,0,0,663,666,1,
		0,0,0,664,662,1,0,0,0,664,665,1,0,0,0,665,129,1,0,0,0,666,664,1,0,0,0,
		667,670,3,132,66,0,668,669,5,35,0,0,669,671,3,134,67,0,670,668,1,0,0,0,
		670,671,1,0,0,0,671,131,1,0,0,0,672,673,3,106,53,0,673,133,1,0,0,0,674,
		677,3,106,53,0,675,677,5,36,0,0,676,674,1,0,0,0,676,675,1,0,0,0,677,135,
		1,0,0,0,678,681,5,37,0,0,679,682,3,128,64,0,680,682,3,138,69,0,681,679,
		1,0,0,0,681,680,1,0,0,0,682,683,1,0,0,0,683,684,5,51,0,0,684,137,1,0,0,
		0,685,690,3,10,5,0,686,687,5,52,0,0,687,689,3,10,5,0,688,686,1,0,0,0,689,
		692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,139,1,0,0,0,692,690,1,
		0,0,0,693,694,5,38,0,0,694,695,3,142,71,0,695,699,5,61,0,0,696,698,3,144,
		72,0,697,696,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,700,1,0,0,0,700,
		702,1,0,0,0,701,699,1,0,0,0,702,703,5,62,0,0,703,141,1,0,0,0,704,705,3,
		188,94,0,705,143,1,0,0,0,706,712,3,48,24,0,707,712,3,146,73,0,708,712,
		3,152,76,0,709,712,3,12,6,0,710,712,3,4,2,0,711,706,1,0,0,0,711,707,1,
		0,0,0,711,708,1,0,0,0,711,709,1,0,0,0,711,710,1,0,0,0,712,145,1,0,0,0,
		713,714,3,148,74,0,714,715,5,56,0,0,715,717,3,150,75,0,716,718,3,50,25,
		0,717,716,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,720,5,51,0,0,720,
		147,1,0,0,0,721,722,3,188,94,0,722,149,1,0,0,0,723,725,5,57,0,0,724,723,
		1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,727,5,46,0,0,727,151,1,0,0,
		0,728,731,5,37,0,0,729,732,3,154,77,0,730,732,3,138,69,0,731,729,1,0,0,
		0,731,730,1,0,0,0,732,733,1,0,0,0,733,734,5,51,0,0,734,153,1,0,0,0,735,
		740,3,156,78,0,736,737,5,52,0,0,737,739,3,156,78,0,738,736,1,0,0,0,739,
		742,1,0,0,0,740,738,1,0,0,0,740,741,1,0,0,0,741,155,1,0,0,0,742,740,1,
		0,0,0,743,746,3,158,79,0,744,745,5,35,0,0,745,747,3,160,80,0,746,744,1,
		0,0,0,746,747,1,0,0,0,747,157,1,0,0,0,748,749,3,150,75,0,749,159,1,0,0,
		0,750,753,3,150,75,0,751,753,5,36,0,0,752,750,1,0,0,0,752,751,1,0,0,0,
		753,161,1,0,0,0,754,755,5,40,0,0,755,756,3,164,82,0,756,760,5,61,0,0,757,
		759,3,166,83,0,758,757,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,
		1,0,0,0,761,763,1,0,0,0,762,760,1,0,0,0,763,764,5,62,0,0,764,163,1,0,0,
		0,765,766,3,22,11,0,766,165,1,0,0,0,767,771,3,168,84,0,768,771,3,114,57,
		0,769,771,3,4,2,0,770,767,1,0,0,0,770,768,1,0,0,0,770,769,1,0,0,0,771,
		167,1,0,0,0,772,783,3,100,50,0,773,774,3,30,15,0,774,775,3,104,52,0,775,
		776,5,56,0,0,776,778,3,106,53,0,777,779,3,50,25,0,778,777,1,0,0,0,778,
		779,1,0,0,0,779,780,1,0,0,0,780,781,5,51,0,0,781,783,1,0,0,0,782,772,1,
		0,0,0,782,773,1,0,0,0,783,169,1,0,0,0,784,785,5,41,0,0,785,786,3,172,86,
		0,786,790,5,61,0,0,787,789,3,174,87,0,788,787,1,0,0,0,789,792,1,0,0,0,
		790,788,1,0,0,0,790,791,1,0,0,0,791,793,1,0,0,0,792,790,1,0,0,0,793,794,
		5,62,0,0,794,171,1,0,0,0,795,796,3,188,94,0,796,173,1,0,0,0,797,802,3,
		48,24,0,798,802,3,4,2,0,799,802,3,176,88,0,800,802,3,12,6,0,801,797,1,
		0,0,0,801,798,1,0,0,0,801,799,1,0,0,0,801,800,1,0,0,0,802,175,1,0,0,0,
		803,804,5,42,0,0,804,805,3,178,89,0,805,806,3,180,90,0,806,807,5,44,0,
		0,807,808,3,182,91,0,808,809,5,51,0,0,809,827,1,0,0,0,810,811,5,42,0,0,
		811,812,3,178,89,0,812,813,3,180,90,0,813,814,5,44,0,0,814,815,3,182,91,
		0,815,819,5,61,0,0,816,818,3,184,92,0,817,816,1,0,0,0,818,821,1,0,0,0,
		819,817,1,0,0,0,819,820,1,0,0,0,820,822,1,0,0,0,821,819,1,0,0,0,822,824,
		5,62,0,0,823,825,5,51,0,0,824,823,1,0,0,0,824,825,1,0,0,0,825,827,1,0,
		0,0,826,803,1,0,0,0,826,810,1,0,0,0,827,177,1,0,0,0,828,829,3,188,94,0,
		829,179,1,0,0,0,830,831,3,186,93,0,831,181,1,0,0,0,832,833,3,186,93,0,
		833,183,1,0,0,0,834,838,3,48,24,0,835,838,3,4,2,0,836,838,3,12,6,0,837,
		834,1,0,0,0,837,835,1,0,0,0,837,836,1,0,0,0,838,185,1,0,0,0,839,841,5,
		59,0,0,840,842,5,43,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,
		0,843,844,3,34,17,0,844,845,5,60,0,0,845,187,1,0,0,0,846,849,3,190,95,
		0,847,849,3,192,96,0,848,846,1,0,0,0,848,847,1,0,0,0,849,189,1,0,0,0,850,
		851,7,5,0,0,851,191,1,0,0,0,852,853,7,6,0,0,853,193,1,0,0,0,85,195,200,
		204,209,223,237,249,257,266,272,275,280,283,288,291,296,299,304,307,321,
		325,336,350,364,381,395,401,406,413,416,421,429,437,441,451,458,462,473,
		477,484,492,495,501,509,512,522,541,549,553,561,576,590,597,603,614,625,
		632,641,647,655,664,670,676,681,690,699,711,717,724,731,740,746,752,760,
		770,778,782,790,801,819,824,826,837,841,848
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
